import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './QuestionBank.css';

const QuestionBank = () => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [paperFilter, setPaperFilter] = useState('all');

  useEffect(() => {
    fetchQuestions();
  }, []);

  const fetchQuestions = async () => {
    try {
      setLoading(true);
      const response = await axios.get('http://localhost:5000/api/question-bank');
      
      if (response.data.success) {
        setQuestions(response.data.questions);
      } else {
        setError('Failed to load questions');
      }
    } catch (err) {
      console.error('Error fetching questions:', err);
      setError('Error loading Question Bank');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (questionId) => {
    if (!window.confirm('Are you sure you want to delete this question?')) {
      return;
    }

    try {
      const response = await axios.delete(`http://localhost:5000/api/question-bank/${questionId}`);
      
      if (response.data.success) {
        setQuestions(questions.filter(q => q.id !== questionId));
        if (selectedQuestion?.id === questionId) {
          setSelectedQuestion(null);
        }
      }
    } catch (err) {
      console.error('Error deleting question:', err);
      alert('Failed to delete question');
    }
  };

  const handleViewSolution = (question) => {
    setSelectedQuestion(question);
  };

  const handleCloseSolution = () => {
    setSelectedQuestion(null);
  };

  const handleDownload = (question) => {
    const content = `QUESTION:\n${question.question_text}\n\n${'='.repeat(60)}\n\nSOLUTION:\n\n${question.solution}\n\n${'='.repeat(60)}\n\nGenerated by Academic Portal`;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `question_${question.id}_solution.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleWhatsApp = (question) => {
    const message = `*QUESTION:*\n${question.question_text}\n\n*SOLUTION:*\n${question.solution}\n\n_Generated by Academic Portal_`;
    const encodedMessage = encodeURIComponent(message);
    window.open(`https://wa.me/?text=${encodedMessage}`, '_blank');
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-IN', {
      day: '2-digit',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Get unique papers for filter
  const uniquePapers = [...new Set(questions.map(q => q.paper_title).filter(Boolean))];

  const filteredQuestions = questions.filter(q => {
    const matchesSearch = q.question_text.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesPaper = paperFilter === 'all' || 
                        (paperFilter === 'none' && !q.paper_title) ||
                        q.paper_title === paperFilter;
    return matchesSearch && matchesPaper;
  });

  return (
    <div className="question-bank">
      <div className="question-bank-header">
        <h2>üíæ Question Bank</h2>
        <p>Your saved questions and solutions</p>
      </div>

      {error && (
        <div className="error-message">
          ‚ö†Ô∏è {error}
        </div>
      )}

      <div className="search-section">
        <input
          type="text"
          className="search-input"
          placeholder="üîç Search questions..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <select
          className="paper-filter"
          value={paperFilter}
          onChange={(e) => setPaperFilter(e.target.value)}
        >
          <option value="all">All Papers</option>
          <option value="none">No Paper</option>
          {uniquePapers.map(paper => (
            <option key={paper} value={paper}>{paper}</option>
          ))}
        </select>
        <div className="question-count">
          {filteredQuestions.length} question{filteredQuestions.length !== 1 ? 's' : ''}
        </div>
      </div>

      {loading ? (
        <div className="loading-state">
          <div className="spinner"></div>
          <p>Loading Question Bank...</p>
        </div>
      ) : filteredQuestions.length === 0 ? (
        <div className="empty-state">
          <div className="empty-icon">üì≠</div>
          <h3>No Questions Yet</h3>
          <p>Questions you solve will appear here automatically</p>
        </div>
      ) : (
        <div className="questions-table-container">
          <table className="questions-table">
            <thead>
              <tr>
                <th>#</th>
                <th>Question</th>
                <th>Question Paper</th>
                <th>Textbook</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredQuestions.map((question, index) => (
                <tr key={question.id}>
                  <td className="index-cell">{index + 1}</td>
                  <td className="question-cell">
                    <div className="question-preview">
                      {question.question_text.length > 120
                        ? question.question_text.substring(0, 120) + '...'
                        : question.question_text}
                    </div>
                  </td>
                  <td className="link-cell">
                    {question.paper_title ? (
                      <span className="link-badge" title={question.paper_title}>
                        {question.paper_title.length > 30 ? question.paper_title.substring(0, 30) + '...' : question.paper_title}
                      </span>
                    ) : (
                      <span className="empty-badge">‚Äî</span>
                    )}
                  </td>
                  <td className="link-cell">
                    {question.textbook_title ? (
                      <span className="link-badge" title={question.textbook_title}>
                        {question.textbook_title.length > 30 ? question.textbook_title.substring(0, 30) + '...' : question.textbook_title}
                      </span>
                    ) : (
                      <span className="empty-badge">‚Äî</span>
                    )}
                  </td>
                  <td className="actions-cell">
                    <button
                      className="action-btn view-btn"
                      onClick={() => handleViewSolution(question)}
                      title="View Solution"
                    >
                      üëÅÔ∏è
                    </button>
                    <button
                      className="action-btn delete-btn"
                      onClick={() => handleDelete(question.id)}
                      title="Delete"
                    >
                      üóëÔ∏è
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Solution Modal */}
      {selectedQuestion && (
        <div className="solution-modal">
          <div className="solution-modal-content">
            <div className="solution-modal-header">
              <h3>üí° Solution</h3>
              <button className="close-btn" onClick={handleCloseSolution}>‚úï</button>
            </div>

            <div className="solution-modal-body">
              <div className="question-box">
                <h4>üìù Question:</h4>
                <p>{selectedQuestion.question_text}</p>
              </div>

              <div className="solution-box">
                <h4>‚ú® Solution:</h4>
                <div className="solution-content">
                  {selectedQuestion.solution.split('\n').map((line, idx) => (
                    <p key={idx}>{line}</p>
                  ))}
                </div>
              </div>

              <div className="solution-meta">
                <div className="meta-row">
                  <span className="meta-item">
                    <strong>Source:</strong> {selectedQuestion.source || 'Unknown'}
                  </span>
                  <span className="meta-item">
                    <strong>Date:</strong> {formatDate(selectedQuestion.created_at)}
                  </span>
                </div>
                {(selectedQuestion.paper_title || selectedQuestion.textbook_title || selectedQuestion.chapter_name) && (
                  <div className="meta-row">
                    {selectedQuestion.paper_title && (
                      <span className="meta-item">
                        <strong>üìÑ Paper:</strong> {selectedQuestion.paper_title}
                      </span>
                    )}
                    {selectedQuestion.textbook_title && (
                      <span className="meta-item">
                        <strong>üìö Textbook:</strong> {selectedQuestion.textbook_title}
                      </span>
                    )}
                    {selectedQuestion.chapter_name && (
                      <span className="meta-item">
                        <strong>üìñ Chapter:</strong> {selectedQuestion.chapter_name}
                      </span>
                    )}
                  </div>
                )}
              </div>
            </div>

            <div className="solution-modal-footer">
              <button className="modal-action-btn download" onClick={() => handleDownload(selectedQuestion)}>
                üì• Download
              </button>
              <button className="modal-action-btn whatsapp" onClick={() => handleWhatsApp(selectedQuestion)}>
                üì± WhatsApp
              </button>
              <button className="modal-action-btn close" onClick={handleCloseSolution}>
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuestionBank;
