{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import'./SingleQuestionUpload.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const SingleQuestionUpload=_ref=>{let{onClose,onQuestionParsed}=_ref;const[inputMethod,setInputMethod]=useState('paste');// 'paste', 'text' - Paste Image is default\nconst[questionText,setQuestionText]=useState('');const[pastedImage,setPastedImage]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState('');const[parsedQuestion,setParsedQuestion]=useState(null);const[solution,setSolution]=useState(null);const[solving,setSolving]=useState(false);const[loadingMessage,setLoadingMessage]=useState('Solving...');const handlePaste=async e=>{var _e$clipboardData;const items=(_e$clipboardData=e.clipboardData)===null||_e$clipboardData===void 0?void 0:_e$clipboardData.items;if(!items)return;for(let i=0;i<items.length;i++){const item=items[i];if(item.type.indexOf('image')!==-1){const blob=item.getAsFile();if(blob){setPastedImage(blob);setError('');// Create preview URL\nconst reader=new FileReader();reader.onload=event=>{// Store the data URL for preview\nsetPastedImage({blob:blob,preview:event.target.result,name:\"pasted-image-\".concat(Date.now(),\".png\"),size:blob.size});};reader.readAsDataURL(blob);console.log('Image pasted from clipboard');break;}}}};const handleClearPastedImage=()=>{setPastedImage(null);};const handleSubmit=async()=>{if(inputMethod==='text'&&!questionText.trim()){setError('Please enter question text');return;}if(inputMethod==='paste'&&!pastedImage){setError('Please paste an image (Ctrl+V or Cmd+V)');return;}setLoading(true);setSolving(true);setError('');try{let questionToSolve=questionText;// If image input, extract text using OCR first\nif(inputMethod==='paste'&&pastedImage){// Step 1: Extract text from image using OCR\nsetLoadingMessage('Extracting text from image...');const ocrFormData=new FormData();ocrFormData.append('file',pastedImage.blob,pastedImage.name);ocrFormData.append('input_type','file');ocrFormData.append('file_type','png');const ocrResponse=await axios.post('http://localhost:5000/api/parse-single-question',ocrFormData,{headers:{'Content-Type':'multipart/form-data'}});if(ocrResponse.data.success&&ocrResponse.data.question){questionToSolve=ocrResponse.data.question.question_text;console.log('Extracted text from image:',questionToSolve);}else{setError('Failed to extract text from image. Please try typing the question instead.');setLoading(false);setSolving(false);return;}}// Step 2: Solve the question using the extracted or typed text\nsetLoadingMessage('Solving question...');const response=await axios.post('http://localhost:5000/api/solve-question',{question_text:questionToSolve,question_type:'unknown',subject:null,chapter_context:null});if(response.data.success){const solutionData={questionText:questionToSolve,solution:response.data.solution,parsedSolution:response.data.parsed_solution};setSolution(solutionData);setParsedQuestion({question_text:questionToSolve});// Step 3: Save to Question Bank\ntry{await axios.post('http://localhost:5000/api/save-solved-question',{question_text:questionToSolve,solution:response.data.solution,source:'solve_one',timestamp:new Date().toISOString()});console.log('Question saved to Question Bank');}catch(saveErr){console.error('Failed to save to Question Bank:',saveErr);// Don't show error to user, just log it\n}if(onQuestionParsed){onQuestionParsed({question_text:questionToSolve});}}else{setError(response.data.error||'Failed to solve question');}}catch(err){var _err$response,_err$response$data;console.error('Error solving question:',err);setError('Error: '+(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.error)||err.message));}finally{setLoading(false);setSolving(false);}};const handleReset=()=>{setQuestionText('');setPastedImage(null);setParsedQuestion(null);setSolution(null);setError('');};const handleDownload=()=>{if(!solution)return;// Create formatted text content\nconst content=\"QUESTION:\\n\".concat(solution.questionText,\"\\n\\n\").concat('='.repeat(60),\"\\n\\nSOLUTION:\\n\\n\").concat(solution.solution,\"\\n\\n\").concat('='.repeat(60),\"\\n\\nGenerated by Academic Portal\");// Create blob and download\nconst blob=new Blob([content],{type:'text/plain'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=\"solution_\".concat(Date.now(),\".txt\");document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url);};const handleWhatsApp=()=>{if(!solution)return;// Create formatted message for WhatsApp\nconst message=\"*QUESTION:*\\n\".concat(solution.questionText,\"\\n\\n*SOLUTION:*\\n\").concat(solution.solution,\"\\n\\n_Generated by Academic Portal_\");// Encode message for URL\nconst encodedMessage=encodeURIComponent(message);// Open WhatsApp with pre-filled message\nwindow.open(\"https://wa.me/?text=\".concat(encodedMessage),'_blank');};return/*#__PURE__*/_jsx(\"div\",{className:\"single-question-modal\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"single-question-modal-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"single-question-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u2728 Solve One Question\"}),/*#__PURE__*/_jsx(\"button\",{className:\"close-btn\",onClick:onClose,children:\"\\u2715\"})]}),!parsedQuestion?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-method-selector\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"method-btn \".concat(inputMethod==='paste'?'active':''),onClick:()=>setInputMethod('paste'),children:\"\\uD83D\\uDCCB Paste Image\"}),/*#__PURE__*/_jsx(\"button\",{className:\"method-btn \".concat(inputMethod==='text'?'active':''),onClick:()=>setInputMethod('text'),children:\"\\u270D\\uFE0F Text Input\"})]}),inputMethod==='text'&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-input-section\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Enter Question Text:\"}),/*#__PURE__*/_jsx(\"textarea\",{value:questionText,onChange:e=>setQuestionText(e.target.value),placeholder:\"Type or paste your question here... Example:\\n1. What is the capital of France?\\n(A) London\\n(B) Paris\\n(C) Berlin\\n(D) Madrid\",rows:12,className:\"question-textarea\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"char-count\",children:[questionText.length,\" characters\"]})]}),inputMethod==='paste'&&/*#__PURE__*/_jsx(\"div\",{className:\"paste-input-section\",children:/*#__PURE__*/_jsx(\"div\",{className:\"paste-area\",onPaste:handlePaste,tabIndex:0,children:!pastedImage?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"paste-icon\",children:\"\\uD83D\\uDCCB\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"paste-instruction\",children:[\"Press \",/*#__PURE__*/_jsx(\"kbd\",{children:\"Ctrl+V\"}),\" (or \",/*#__PURE__*/_jsx(\"kbd\",{children:\"Cmd+V\"}),\" on Mac) to paste an image\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"paste-hint\",children:\"Take a screenshot or copy an image, then paste it here\"})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"pasted-image-preview\",children:[/*#__PURE__*/_jsx(\"img\",{src:pastedImage.preview,alt:\"Pasted question\",className:\"preview-image\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"pasted-image-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pasted-image-name\",children:[\"\\uD83D\\uDCF7 \",pastedImage.name]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pasted-image-size\",children:[(pastedImage.size/1024).toFixed(2),\" KB\"]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"clear-pasted-btn\",onClick:handleClearPastedImage,children:\"\\u2715 Clear Image\"})]})})}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[\"\\u26A0\\uFE0F \",error]}),/*#__PURE__*/_jsxs(\"div\",{className:\"action-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"submit-btn\",onClick:handleSubmit,disabled:loading||inputMethod==='text'&&!questionText.trim()||inputMethod==='paste'&&!pastedImage,children:loading?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"spinner\"}),loadingMessage]}):/*#__PURE__*/_jsx(_Fragment,{children:\"\\u2728 Solve\"})}),/*#__PURE__*/_jsx(\"button\",{className:\"cancel-btn\",onClick:onClose,children:\"Cancel\"})]})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"parsed-result\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"result-header\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"\\u2728 Solution\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"solution-question-box\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\uD83D\\uDCDD Question:\"}),/*#__PURE__*/_jsx(\"p\",{children:solution===null||solution===void 0?void 0:solution.questionText})]}),solution&&/*#__PURE__*/_jsx(\"div\",{className:\"solution-content\",children:(()=>{const lines=solution.solution.split('\\n');let inDiagram=false;let diagramLines=[];let lastWasEmpty=false;let lastWasSection=false;let currentSection=null;const elements=[];lines.forEach((line,idx)=>{// Detect ASCII art diagram patterns (box drawing characters)\nconst isAsciiArt=line.match(/^[\\s]*[\\+\\-\\|\\/\\\\<>]+[\\s\\+\\-\\|\\/\\\\<>]*$/)||line.match(/^[\\s]*[\\+\\-\\|]{3,}/)||line.match(/[\\+\\-]{5,}/)||line.includes('|')&&line.includes('+');// Detect diagram start/end\nif(line.match(/^\\*\\*Diagram/i)||line.includes('```')||!inDiagram&&isAsciiArt){if(!inDiagram){// Starting a diagram\ninDiagram=true;if(isAsciiArt){diagramLines.push(line);}}else{// Ending a diagram\nif(line.includes('```')||line.match(/^\\*\\*Diagram/i)){inDiagram=false;}else if(isAsciiArt){diagramLines.push(line);}else{// End of ASCII art\ninDiagram=false;}if(!inDiagram&&diagramLines.length>0){const diagram=diagramLines.join('\\n');diagramLines=[];elements.push(/*#__PURE__*/_jsx(\"pre\",{className:\"solution-diagram\",children:diagram},idx));lastWasEmpty=false;lastWasSection=true;}}return;}// Collect diagram lines\nif(inDiagram){diagramLines.push(line);return;}// Highlight section headers\nif(line.match(/^\\*\\*.*\\*\\*:?$/)){const sectionName=line.replace(/\\*\\*/g,'').replace(/:/g,'').trim().toLowerCase();currentSection=sectionName;elements.push(/*#__PURE__*/_jsx(\"h4\",{className:\"solution-section-header\",children:line.replace(/\\*\\*/g,'').replace(/:/g,'')},idx));lastWasEmpty=false;lastWasSection=true;return;}// Highlight final answer\nif(line.match(/FINAL ANSWER:/i)){elements.push(/*#__PURE__*/_jsxs(\"div\",{className:\"final-answer-box\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"final-answer-icon\",children:\"\\uD83C\\uDFAF\"}),/*#__PURE__*/_jsx(\"div\",{className:\"final-answer-text\",dangerouslySetInnerHTML:{__html:line.replace(/FINAL ANSWER:/i,'').trim()}})]},idx));lastWasEmpty=false;lastWasSection=true;return;}// Highlight step numbers\nif(line.match(/^(Step \\d+:|^\\d+\\.)/)){elements.push(/*#__PURE__*/_jsx(\"div\",{className:\"solution-step\",dangerouslySetInnerHTML:{__html:line}},idx));lastWasEmpty=false;lastWasSection=false;return;}// Handle empty lines\nif(!line.trim()){const compactSections=['given','find','formula','concept','formula/concept'];const isCompactSection=compactSections.some(s=>currentSection&&currentSection.includes(s));if(!lastWasEmpty&&lastWasSection&&!isCompactSection){elements.push(/*#__PURE__*/_jsx(\"div\",{className:\"section-spacer\"},idx));lastWasEmpty=true;}return;}// Regular text\nconst compactSections=['given','find','formula','concept','formula/concept'];const isCompactSection=compactSections.some(s=>currentSection&&currentSection.includes(s));const textClass=isCompactSection?'solution-text compact':'solution-text';elements.push(/*#__PURE__*/_jsx(\"p\",{className:textClass,dangerouslySetInnerHTML:{__html:line}},idx));lastWasEmpty=false;lastWasSection=false;});return elements;})()}),/*#__PURE__*/_jsxs(\"div\",{className:\"result-actions\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"action-buttons-row\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"download-btn\",onClick:handleDownload,children:\"\\uD83D\\uDCE5 Download\"}),/*#__PURE__*/_jsx(\"button\",{className:\"whatsapp-btn\",onClick:handleWhatsApp,children:\"\\uD83D\\uDCF1 WhatsApp\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"action-buttons-row\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"parse-another-btn\",onClick:handleReset,children:\"\\u2728 Solve Another Question\"}),/*#__PURE__*/_jsx(\"button\",{className:\"close-result-btn\",onClick:onClose,children:\"Close\"})]})]})]})]})});};export default SingleQuestionUpload;","map":{"version":3,"names":["React","useState","axios","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SingleQuestionUpload","_ref","onClose","onQuestionParsed","inputMethod","setInputMethod","questionText","setQuestionText","pastedImage","setPastedImage","loading","setLoading","error","setError","parsedQuestion","setParsedQuestion","solution","setSolution","solving","setSolving","loadingMessage","setLoadingMessage","handlePaste","e","_e$clipboardData","items","clipboardData","i","length","item","type","indexOf","blob","getAsFile","reader","FileReader","onload","event","preview","target","result","name","concat","Date","now","size","readAsDataURL","console","log","handleClearPastedImage","handleSubmit","trim","questionToSolve","ocrFormData","FormData","append","ocrResponse","post","headers","data","success","question","question_text","response","question_type","subject","chapter_context","solutionData","parsedSolution","parsed_solution","source","timestamp","toISOString","saveErr","err","_err$response","_err$response$data","message","handleReset","handleDownload","content","repeat","Blob","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","handleWhatsApp","encodedMessage","encodeURIComponent","window","open","className","children","onClick","value","onChange","placeholder","rows","onPaste","tabIndex","src","alt","toFixed","disabled","lines","split","inDiagram","diagramLines","lastWasEmpty","lastWasSection","currentSection","elements","forEach","line","idx","isAsciiArt","match","includes","push","diagram","join","sectionName","replace","toLowerCase","dangerouslySetInnerHTML","__html","compactSections","isCompactSection","some","s","textClass"],"sources":["D:/AI/_Programs/CBSE/aqnamic/frontend/src/components/SingleQuestionUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './SingleQuestionUpload.css';\n\nconst SingleQuestionUpload = ({ onClose, onQuestionParsed }) => {\n  const [inputMethod, setInputMethod] = useState('paste'); // 'paste', 'text' - Paste Image is default\n  const [questionText, setQuestionText] = useState('');\n  const [pastedImage, setPastedImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [parsedQuestion, setParsedQuestion] = useState(null);\n  const [solution, setSolution] = useState(null);\n  const [solving, setSolving] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('Solving...');\n\n  const handlePaste = async (e) => {\n    const items = e.clipboardData?.items;\n    if (!items) return;\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      \n      if (item.type.indexOf('image') !== -1) {\n        const blob = item.getAsFile();\n        if (blob) {\n          setPastedImage(blob);\n          setError('');\n          \n          // Create preview URL\n          const reader = new FileReader();\n          reader.onload = (event) => {\n            // Store the data URL for preview\n            setPastedImage({\n              blob: blob,\n              preview: event.target.result,\n              name: `pasted-image-${Date.now()}.png`,\n              size: blob.size\n            });\n          };\n          reader.readAsDataURL(blob);\n          \n          console.log('Image pasted from clipboard');\n          break;\n        }\n      }\n    }\n  };\n\n  const handleClearPastedImage = () => {\n    setPastedImage(null);\n  };\n\n  const handleSubmit = async () => {\n    if (inputMethod === 'text' && !questionText.trim()) {\n      setError('Please enter question text');\n      return;\n    }\n\n    if (inputMethod === 'paste' && !pastedImage) {\n      setError('Please paste an image (Ctrl+V or Cmd+V)');\n      return;\n    }\n\n    setLoading(true);\n    setSolving(true);\n    setError('');\n\n    try {\n      let questionToSolve = questionText;\n\n      // If image input, extract text using OCR first\n      if (inputMethod === 'paste' && pastedImage) {\n        // Step 1: Extract text from image using OCR\n        setLoadingMessage('Extracting text from image...');\n        \n        const ocrFormData = new FormData();\n        ocrFormData.append('file', pastedImage.blob, pastedImage.name);\n        ocrFormData.append('input_type', 'file');\n        ocrFormData.append('file_type', 'png');\n\n        const ocrResponse = await axios.post('http://localhost:5000/api/parse-single-question', ocrFormData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n\n        if (ocrResponse.data.success && ocrResponse.data.question) {\n          questionToSolve = ocrResponse.data.question.question_text;\n          console.log('Extracted text from image:', questionToSolve);\n        } else {\n          setError('Failed to extract text from image. Please try typing the question instead.');\n          setLoading(false);\n          setSolving(false);\n          return;\n        }\n      }\n\n      // Step 2: Solve the question using the extracted or typed text\n      setLoadingMessage('Solving question...');\n      \n      const response = await axios.post('http://localhost:5000/api/solve-question', {\n        question_text: questionToSolve,\n        question_type: 'unknown',\n        subject: null,\n        chapter_context: null\n      });\n\n      if (response.data.success) {\n        const solutionData = {\n          questionText: questionToSolve,\n          solution: response.data.solution,\n          parsedSolution: response.data.parsed_solution\n        };\n        setSolution(solutionData);\n        setParsedQuestion({ question_text: questionToSolve });\n        \n        // Step 3: Save to Question Bank\n        try {\n          await axios.post('http://localhost:5000/api/save-solved-question', {\n            question_text: questionToSolve,\n            solution: response.data.solution,\n            source: 'solve_one',\n            timestamp: new Date().toISOString()\n          });\n          console.log('Question saved to Question Bank');\n        } catch (saveErr) {\n          console.error('Failed to save to Question Bank:', saveErr);\n          // Don't show error to user, just log it\n        }\n        \n        if (onQuestionParsed) {\n          onQuestionParsed({ question_text: questionToSolve });\n        }\n      } else {\n        setError(response.data.error || 'Failed to solve question');\n      }\n    } catch (err) {\n      console.error('Error solving question:', err);\n      setError('Error: ' + (err.response?.data?.error || err.message));\n    } finally {\n      setLoading(false);\n      setSolving(false);\n    }\n  };\n\n  const handleReset = () => {\n    setQuestionText('');\n    setPastedImage(null);\n    setParsedQuestion(null);\n    setSolution(null);\n    setError('');\n  };\n\n  const handleDownload = () => {\n    if (!solution) return;\n    \n    // Create formatted text content\n    const content = `QUESTION:\\n${solution.questionText}\\n\\n${'='.repeat(60)}\\n\\nSOLUTION:\\n\\n${solution.solution}\\n\\n${'='.repeat(60)}\\n\\nGenerated by Academic Portal`;\n    \n    // Create blob and download\n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `solution_${Date.now()}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleWhatsApp = () => {\n    if (!solution) return;\n    \n    // Create formatted message for WhatsApp\n    const message = `*QUESTION:*\\n${solution.questionText}\\n\\n*SOLUTION:*\\n${solution.solution}\\n\\n_Generated by Academic Portal_`;\n    \n    // Encode message for URL\n    const encodedMessage = encodeURIComponent(message);\n    \n    // Open WhatsApp with pre-filled message\n    window.open(`https://wa.me/?text=${encodedMessage}`, '_blank');\n  };\n\n  return (\n    <div className=\"single-question-modal\">\n      <div className=\"single-question-modal-content\">\n        <div className=\"single-question-header\">\n          <h2>✨ Solve One Question</h2>\n          <button className=\"close-btn\" onClick={onClose}>✕</button>\n        </div>\n\n        {!parsedQuestion ? (\n          <>\n            <div className=\"input-method-selector\">\n              <button\n                className={`method-btn ${inputMethod === 'paste' ? 'active' : ''}`}\n                onClick={() => setInputMethod('paste')}\n              >\n                📋 Paste Image\n              </button>\n              <button\n                className={`method-btn ${inputMethod === 'text' ? 'active' : ''}`}\n                onClick={() => setInputMethod('text')}\n              >\n                ✍️ Text Input\n              </button>\n            </div>\n\n            {inputMethod === 'text' && (\n              <div className=\"text-input-section\">\n                <label>Enter Question Text:</label>\n                <textarea\n                  value={questionText}\n                  onChange={(e) => setQuestionText(e.target.value)}\n                  placeholder=\"Type or paste your question here...&#10;&#10;Example:&#10;1. What is the capital of France?&#10;(A) London&#10;(B) Paris&#10;(C) Berlin&#10;(D) Madrid\"\n                  rows={12}\n                  className=\"question-textarea\"\n                />\n                <div className=\"char-count\">\n                  {questionText.length} characters\n                </div>\n              </div>\n            )}\n\n            {inputMethod === 'paste' && (\n              <div className=\"paste-input-section\">\n                <div \n                  className=\"paste-area\"\n                  onPaste={handlePaste}\n                  tabIndex={0}\n                >\n                  {!pastedImage ? (\n                    <>\n                      <div className=\"paste-icon\">📋</div>\n                      <div className=\"paste-instruction\">\n                        Press <kbd>Ctrl+V</kbd> (or <kbd>Cmd+V</kbd> on Mac) to paste an image\n                      </div>\n                      <div className=\"paste-hint\">\n                        Take a screenshot or copy an image, then paste it here\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"pasted-image-preview\">\n                      <img \n                        src={pastedImage.preview} \n                        alt=\"Pasted question\" \n                        className=\"preview-image\"\n                      />\n                      <div className=\"pasted-image-info\">\n                        <div className=\"pasted-image-name\">📷 {pastedImage.name}</div>\n                        <div className=\"pasted-image-size\">\n                          {(pastedImage.size / 1024).toFixed(2)} KB\n                        </div>\n                      </div>\n                      <button \n                        className=\"clear-pasted-btn\"\n                        onClick={handleClearPastedImage}\n                      >\n                        ✕ Clear Image\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {error && (\n              <div className=\"error-message\">\n                ⚠️ {error}\n              </div>\n            )}\n\n            <div className=\"action-buttons\">\n              <button\n                className=\"submit-btn\"\n                onClick={handleSubmit}\n                disabled={loading || (inputMethod === 'text' && !questionText.trim()) || (inputMethod === 'paste' && !pastedImage)}\n              >\n                {loading ? (\n                  <>\n                    <span className=\"spinner\"></span>\n                    {loadingMessage}\n                  </>\n                ) : (\n                  <>\n                    ✨ Solve\n                  </>\n                )}\n              </button>\n              <button className=\"cancel-btn\" onClick={onClose}>\n                Cancel\n              </button>\n            </div>\n          </>\n        ) : (\n          <div className=\"parsed-result\">\n            <div className=\"result-header\">\n              <h3>✨ Solution</h3>\n            </div>\n\n            {/* Question Display */}\n            <div className=\"solution-question-box\">\n              <h4>📝 Question:</h4>\n              <p>{solution?.questionText}</p>\n            </div>\n\n            {/* Solution Display */}\n            {solution && (\n              <div className=\"solution-content\">\n                {(() => {\n                  const lines = solution.solution.split('\\n');\n                  let inDiagram = false;\n                  let diagramLines = [];\n                  let lastWasEmpty = false;\n                  let lastWasSection = false;\n                  let currentSection = null;\n                  const elements = [];\n                  \n                  lines.forEach((line, idx) => {\n                    // Detect ASCII art diagram patterns (box drawing characters)\n                    const isAsciiArt = line.match(/^[\\s]*[\\+\\-\\|\\/\\\\<>]+[\\s\\+\\-\\|\\/\\\\<>]*$/) || \n                                      line.match(/^[\\s]*[\\+\\-\\|]{3,}/) ||\n                                      line.match(/[\\+\\-]{5,}/) ||\n                                      (line.includes('|') && line.includes('+'));\n                    \n                    // Detect diagram start/end\n                    if (line.match(/^\\*\\*Diagram/i) || line.includes('```') || (!inDiagram && isAsciiArt)) {\n                      if (!inDiagram) {\n                        // Starting a diagram\n                        inDiagram = true;\n                        if (isAsciiArt) {\n                          diagramLines.push(line);\n                        }\n                      } else {\n                        // Ending a diagram\n                        if (line.includes('```') || line.match(/^\\*\\*Diagram/i)) {\n                          inDiagram = false;\n                        } else if (isAsciiArt) {\n                          diagramLines.push(line);\n                        } else {\n                          // End of ASCII art\n                          inDiagram = false;\n                        }\n                        \n                        if (!inDiagram && diagramLines.length > 0) {\n                          const diagram = diagramLines.join('\\n');\n                          diagramLines = [];\n                          elements.push(<pre key={idx} className=\"solution-diagram\">{diagram}</pre>);\n                          lastWasEmpty = false;\n                          lastWasSection = true;\n                        }\n                      }\n                      return;\n                    }\n                    \n                    // Collect diagram lines\n                    if (inDiagram) {\n                      diagramLines.push(line);\n                      return;\n                    }\n                    \n                    // Highlight section headers\n                    if (line.match(/^\\*\\*.*\\*\\*:?$/)) {\n                      const sectionName = line.replace(/\\*\\*/g, '').replace(/:/g, '').trim().toLowerCase();\n                      currentSection = sectionName;\n                      elements.push(<h4 key={idx} className=\"solution-section-header\">{line.replace(/\\*\\*/g, '').replace(/:/g, '')}</h4>);\n                      lastWasEmpty = false;\n                      lastWasSection = true;\n                      return;\n                    }\n                    \n                    // Highlight final answer\n                    if (line.match(/FINAL ANSWER:/i)) {\n                      elements.push(\n                        <div key={idx} className=\"final-answer-box\">\n                          <div className=\"final-answer-icon\">🎯</div>\n                          <div className=\"final-answer-text\" dangerouslySetInnerHTML={{\n                            __html: line.replace(/FINAL ANSWER:/i, '').trim()\n                          }}></div>\n                        </div>\n                      );\n                      lastWasEmpty = false;\n                      lastWasSection = true;\n                      return;\n                    }\n                    \n                    // Highlight step numbers\n                    if (line.match(/^(Step \\d+:|^\\d+\\.)/)) {\n                      elements.push(\n                        <div key={idx} className=\"solution-step\" dangerouslySetInnerHTML={{\n                          __html: line\n                        }}></div>\n                      );\n                      lastWasEmpty = false;\n                      lastWasSection = false;\n                      return;\n                    }\n                    \n                    // Handle empty lines\n                    if (!line.trim()) {\n                      const compactSections = ['given', 'find', 'formula', 'concept', 'formula/concept'];\n                      const isCompactSection = compactSections.some(s => currentSection && currentSection.includes(s));\n                      \n                      if (!lastWasEmpty && lastWasSection && !isCompactSection) {\n                        elements.push(<div key={idx} className=\"section-spacer\"></div>);\n                        lastWasEmpty = true;\n                      }\n                      return;\n                    }\n                    \n                    // Regular text\n                    const compactSections = ['given', 'find', 'formula', 'concept', 'formula/concept'];\n                    const isCompactSection = compactSections.some(s => currentSection && currentSection.includes(s));\n                    const textClass = isCompactSection ? 'solution-text compact' : 'solution-text';\n                    \n                    elements.push(\n                      <p key={idx} className={textClass} dangerouslySetInnerHTML={{\n                        __html: line\n                      }}></p>\n                    );\n                    lastWasEmpty = false;\n                    lastWasSection = false;\n                  });\n                  \n                  return elements;\n                })()}\n              </div>\n            )}\n\n            <div className=\"result-actions\">\n              <div className=\"action-buttons-row\">\n                <button className=\"download-btn\" onClick={handleDownload}>\n                  📥 Download\n                </button>\n                <button className=\"whatsapp-btn\" onClick={handleWhatsApp}>\n                  📱 WhatsApp\n                </button>\n              </div>\n              <div className=\"action-buttons-row\">\n                <button className=\"parse-another-btn\" onClick={handleReset}>\n                  ✨ Solve Another Question\n                </button>\n                <button className=\"close-result-btn\" onClick={onClose}>\n                  Close\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SingleQuestionUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}