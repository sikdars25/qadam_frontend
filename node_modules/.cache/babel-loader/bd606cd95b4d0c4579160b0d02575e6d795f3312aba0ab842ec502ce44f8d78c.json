{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import'./ParsedQuestionsView.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ParsedQuestionsView=_ref=>{let{paperId,onClose,embedded=false}=_ref;const[questions,setQuestions]=useState([]);const[loading,setLoading]=useState(true);const[filter,setFilter]=useState('all');const[searchTerm,setSearchTerm]=useState('');const[selectedDiagram,setSelectedDiagram]=useState(null);const[selectedPaper,setSelectedPaper]=useState(paperId||'all');const[groupByPaper,setGroupByPaper]=useState(!paperId);// Group by default when viewing all\nconst[selectedReasoning,setSelectedReasoning]=useState(null);const[solvingQuestion,setSolvingQuestion]=useState(false);const[selectedSolution,setSelectedSolution]=useState(null);// Parse question text to extract main question, MCQ options, and instructions\nconst parseQuestionContent=text=>{if(!text)return{mainQuestion:'',mcqOptions:[],instructions:''};// Extract inline instructions in format: [Instruction: ...]\nconst inlineInstructionMatch=text.match(/\\[Instruction:\\s*([^\\]]+)\\]/i);const instructions=inlineInstructionMatch?inlineInstructionMatch[1].trim():'';// Remove inline instruction from text\nlet remainingText=inlineInstructionMatch?text.replace(inlineInstructionMatch[0],'').trim():text;// Extract MCQ options: (A), (B), (C), (D) or A), B), C), D)\nconst mcqPattern=/\\(([A-D])\\)\\s*([^\\(\\)]+?)(?=\\([A-D]\\)|$)/gi;const mcqMatches=[...remainingText.matchAll(mcqPattern)];let mcqOptions=[];let mainQuestion=remainingText;if(mcqMatches.length>=2){// Extract MCQ options\nmcqOptions=mcqMatches.map(match=>({label:match[1],text:match[2].trim()}));// Remove MCQ options from main question\nmcqMatches.forEach(match=>{mainQuestion=mainQuestion.replace(match[0],'');});mainQuestion=mainQuestion.trim();}return{mainQuestion,mcqOptions,instructions};};// Format question text to show sub-parts on new lines\nconst formatQuestionText=text=>{if(!text)return text;// Split by common sub-part patterns: (a), (b), (c) or a), b), c) or (i), (ii), i), ii)\n// Look ahead to split before these patterns\nconst parts=text.split(/(?=\\n?\\s*\\(?[a-z]\\)\\s)|(?=\\n?\\s*\\(?[ivx]+\\)\\s)/i);return/*#__PURE__*/_jsx(\"div\",{children:parts.map((part,idx)=>{const trimmedPart=part.trim();if(!trimmedPart)return null;// Check if this part starts with a sub-number like (a), a), (i), i), etc.\nconst isSubPart=/^\\(?[a-z]\\)|^\\(?[ivx]+\\)/i.test(trimmedPart);return/*#__PURE__*/_jsx(\"div\",{className:isSubPart?'sub-part-line':'main-question-line',children:trimmedPart},idx);})});};useEffect(()=>{fetchParsedQuestions();},[paperId]);const fetchParsedQuestions=async()=>{try{const url=paperId?\"http://localhost:5000/api/parsed-questions?paper_id=\".concat(paperId):'http://localhost:5000/api/parsed-questions';const response=await axios.get(url);setQuestions(response.data);}catch(err){console.error('Error fetching parsed questions:',err);}finally{setLoading(false);}};const handleSolveQuestion=async question=>{setSolvingQuestion(true);try{const response=await axios.post('http://localhost:5000/api/solve-question',{question_text:question.question_text,question_type:question.question_type,subject:question.subject,chapter_context:null});if(response.data.success){setSelectedSolution({questionNumber:question.question_number,questionText:question.question_text,questionType:question.question_type,solution:response.data.solution,parsedSolution:response.data.parsed_solution});// Save to Question Bank\ntry{await axios.post('http://localhost:5000/api/save-solved-question',{question_text:question.question_text,solution:response.data.solution,source:'all_questions',paper_id:question.paper_id,textbook_id:null,chapter_name:null,timestamp:new Date().toISOString()});console.log('✅ Question saved to Question Bank');}catch(saveErr){console.error('Failed to save to Question Bank:',saveErr);}}else{alert('Failed to solve question: '+(response.data.error||'Unknown error'));}}catch(error){var _error$response,_error$response$data;console.error('Error solving question:',error);alert('Error solving question: '+(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||error.message));}finally{setSolvingQuestion(false);}};const filteredQuestions=questions.filter(q=>{const matchesFilter=filter==='all'||q.question_type===filter;const matchesSearch=q.question_text.toLowerCase().includes(searchTerm.toLowerCase())||q.question_number.toLowerCase().includes(searchTerm.toLowerCase());const matchesPaper=selectedPaper==='all'||q.paper_id===parseInt(selectedPaper);return matchesFilter&&matchesSearch&&matchesPaper;});const questionTypes=[...new Set(questions.map(q=>q.question_type))];// Get unique papers\nconst papers=[...new Map(questions.map(q=>[q.paper_id,{id:q.paper_id,title:q.paper_title,subject:q.subject}])).values()];// Group questions by paper\nconst groupedQuestions={};filteredQuestions.forEach(q=>{const key=\"\".concat(q.paper_id,\"_\").concat(q.paper_title);if(!groupedQuestions[key]){groupedQuestions[key]={paper_id:q.paper_id,paper_title:q.paper_title,subject:q.subject,questions:[]};}groupedQuestions[key].questions.push(q);});const containerClass=embedded?\"parsed-questions-embedded\":\"parsed-questions-modal\";const innerClass=embedded?\"parsed-questions-content\":\"parsed-questions-container\";return/*#__PURE__*/_jsx(\"div\",{className:containerClass,children:/*#__PURE__*/_jsxs(\"div\",{className:innerClass,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"parsed-header\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83D\\uDCCB All Parsed Questions\"}),/*#__PURE__*/_jsxs(\"p\",{children:[questions.length,\" questions from \",papers.length,\" paper(s)\"]})]}),!embedded&&/*#__PURE__*/_jsx(\"button\",{className:\"close-btn\",onClick:onClose,children:\"\\u2715\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"parsed-controls\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\uD83D\\uDD0D Search questions...\",value:searchTerm,onChange:e=>setSearchTerm(e.target.value),className:\"search-input\"}),!paperId&&/*#__PURE__*/_jsxs(\"select\",{value:selectedPaper,onChange:e=>setSelectedPaper(e.target.value),className:\"filter-select\",children:[/*#__PURE__*/_jsxs(\"option\",{value:\"all\",children:[\"All Papers (\",papers.length,\")\"]}),papers.map(paper=>/*#__PURE__*/_jsxs(\"option\",{value:paper.id,children:[paper.title,\" - \",paper.subject]},paper.id))]}),/*#__PURE__*/_jsxs(\"select\",{value:filter,onChange:e=>setFilter(e.target.value),className:\"filter-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"all\",children:\"All Types\"}),questionTypes.map(type=>/*#__PURE__*/_jsx(\"option\",{value:type,children:type},type))]}),!paperId&&!embedded&&/*#__PURE__*/_jsxs(\"label\",{className:\"group-toggle\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:groupByPaper,onChange:e=>setGroupByPaper(e.target.checked)}),\"Group by Paper\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"results-count\",children:[filteredQuestions.length,\" of \",questions.length,\" questions\"]})]}),loading?/*#__PURE__*/_jsxs(\"div\",{className:\"loading-state\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading parsed questions...\"})]}):groupByPaper&&!paperId?/*#__PURE__*/_jsx(\"div\",{className:\"questions-list\",children:Object.values(groupedQuestions).map(group=>/*#__PURE__*/_jsxs(\"div\",{className:\"paper-group\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"paper-group-header\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"\\uD83D\\uDCC4 \",group.paper_title]}),/*#__PURE__*/_jsx(\"span\",{className:\"paper-subject\",children:group.subject}),/*#__PURE__*/_jsxs(\"span\",{className:\"question-count-badge\",children:[group.questions.length,\" questions\"]})]}),group.questions.map((q,index)=>{const parsedData=q.parsed_data?JSON.parse(q.parsed_data):{};let displayNumber=q.question_number;const numberMatch=q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);if(numberMatch){displayNumber=numberMatch[1];}return/*#__PURE__*/_jsxs(\"div\",{className:\"parsed-question-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-header-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-number-badge\",children:[\"Q\",displayNumber]}),/*#__PURE__*/_jsxs(\"div\",{className:\"question-meta-tags\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"type-badge \".concat(q.question_type),children:q.question_type}),q.has_diagram&&parsedData.diagram_files&&parsedData.diagram_files.length>0&&/*#__PURE__*/_jsxs(\"span\",{className:\"diagram-badge clickable\",onClick:()=>{console.log('Diagram badge clicked:',{paperId:q.paper_id,filename:parsedData.diagram_files[0]});setSelectedDiagram({paperId:q.paper_id,filename:parsedData.diagram_files[0]});},children:[\"\\uD83D\\uDCCA Diagram \",parsedData.diagram_files.length>1?\"(\".concat(parsedData.diagram_files.length,\")\"):'']}),q.marks&&/*#__PURE__*/_jsxs(\"span\",{className:\"marks-badge\",children:[q.marks,\" marks\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"solve-btn\",onClick:()=>handleSolveQuestion(q),disabled:solvingQuestion,title:\"Get detailed step-by-step solution\",children:solvingQuestion?'⏳ Solving...':'✨ Solve Question'})]})]}),(()=>{const{mainQuestion,mcqOptions,instructions}=parseQuestionContent(q.question_text);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-text-display\",children:[formatQuestionText(mainQuestion),instructions&&/*#__PURE__*/_jsxs(\"span\",{className:\"inline-instruction\",children:[\" [Instruction: \",instructions,\"]\"]})]}),mcqOptions.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"mcq-options-display\",children:mcqOptions.map((option,idx)=>/*#__PURE__*/_jsxs(\"div\",{className:\"mcq-option\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"mcq-option-label\",children:[\"(\",option.label,\")\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"mcq-option-text\",children:option.text})]},idx))})]});})(),parsedData.sub_parts&&parsedData.sub_parts.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"sub-parts-display\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Sub-parts:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"sub-parts-list\",children:parsedData.sub_parts.map((part,idx)=>/*#__PURE__*/_jsx(\"div\",{className:\"sub-part-item\",children:part},idx))})]}),parsedData.diagram_files&&parsedData.diagram_files.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"diagrams-inline-display\",children:[/*#__PURE__*/_jsxs(\"strong\",{children:[\"\\uD83D\\uDCCA Diagram\",parsedData.diagram_files.length>1?'s':'',\":\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"diagrams-inline-container\",children:parsedData.diagram_files.map((filename,idx)=>/*#__PURE__*/_jsxs(\"div\",{className:\"diagram-inline-wrapper\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"http://localhost:5000/api/diagram/\".concat(q.paper_id,\"/\").concat(filename),alt:\"Diagram \".concat(idx+1),className:\"diagram-inline\",onClick:()=>{console.log('Diagram clicked:',{paperId:q.paper_id,filename});setSelectedDiagram({paperId:q.paper_id,filename});},onError:e=>e.target.style.display='none'}),/*#__PURE__*/_jsx(\"span\",{className:\"diagram-caption\",children:\"Click to enlarge\"})]},idx))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"question-footer\",children:/*#__PURE__*/_jsx(\"span\",{className:\"created-date\",children:new Date(q.created_at).toLocaleDateString()})})]},q.id);})]},group.paper_id))}):/*#__PURE__*/_jsxs(\"div\",{className:\"questions-list\",children:[filteredQuestions.map((q,index)=>{const parsedData=q.parsed_data?JSON.parse(q.parsed_data):{};// Extract question number from question_text if it starts with a number\nlet displayNumber=q.question_number;const numberMatch=q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);if(numberMatch){displayNumber=numberMatch[1];}return/*#__PURE__*/_jsxs(\"div\",{className:\"parsed-question-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-header-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-number-badge\",children:[\"Q\",displayNumber]}),/*#__PURE__*/_jsxs(\"div\",{className:\"question-meta-tags\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"type-badge \".concat(q.question_type),children:q.question_type}),q.has_diagram&&parsedData.diagram_files&&parsedData.diagram_files.length>0&&/*#__PURE__*/_jsxs(\"span\",{className:\"diagram-badge clickable\",onClick:()=>{console.log('Diagram badge clicked (ungrouped):',{paperId:q.paper_id,filename:parsedData.diagram_files[0]});setSelectedDiagram({paperId:q.paper_id,filename:parsedData.diagram_files[0]});},children:[\"\\uD83D\\uDCCA Diagram \",parsedData.diagram_files.length>1?\"(\".concat(parsedData.diagram_files.length,\")\"):'']}),q.marks&&/*#__PURE__*/_jsxs(\"span\",{className:\"marks-badge\",children:[q.marks,\" marks\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"solve-btn\",onClick:()=>handleSolveQuestion(q),disabled:solvingQuestion,title:\"Get detailed step-by-step solution\",children:solvingQuestion?'⏳ Solving...':'✨ Solve Question'})]})]}),(()=>{const{mainQuestion,mcqOptions,instructions}=parseQuestionContent(q.question_text);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-text-display\",children:[formatQuestionText(mainQuestion),instructions&&/*#__PURE__*/_jsxs(\"span\",{className:\"inline-instruction\",children:[\" [Instruction: \",instructions,\"]\"]})]}),mcqOptions.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"mcq-options-display\",children:mcqOptions.map((option,idx)=>/*#__PURE__*/_jsxs(\"div\",{className:\"mcq-option\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"mcq-option-label\",children:[\"(\",option.label,\")\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"mcq-option-text\",children:option.text})]},idx))})]});})(),parsedData.sub_parts&&parsedData.sub_parts.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"sub-parts-display\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Sub-parts:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"sub-parts-list\",children:parsedData.sub_parts.map((part,idx)=>/*#__PURE__*/_jsx(\"div\",{className:\"sub-part-item\",children:part},idx))})]}),parsedData.diagram_files&&parsedData.diagram_files.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"diagrams-inline-display\",children:[/*#__PURE__*/_jsxs(\"strong\",{children:[\"\\uD83D\\uDCCA Diagram\",parsedData.diagram_files.length>1?'s':'',\":\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"diagrams-inline-container\",children:parsedData.diagram_files.map((filename,idx)=>/*#__PURE__*/_jsxs(\"div\",{className:\"diagram-inline-wrapper\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"http://localhost:5000/api/diagram/\".concat(q.paper_id,\"/\").concat(filename),alt:\"Diagram \".concat(idx+1),className:\"diagram-inline\",onClick:()=>{console.log('Diagram clicked (ungrouped):',{paperId:q.paper_id,filename});setSelectedDiagram({paperId:q.paper_id,filename});},onError:e=>e.target.style.display='none'}),/*#__PURE__*/_jsx(\"span\",{className:\"diagram-caption\",children:\"Click to enlarge\"})]},idx))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"question-footer\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"paper-info\",children:[\"\\uD83D\\uDCC4 \",q.paper_title,\" \\u2022 \",q.subject]}),/*#__PURE__*/_jsx(\"span\",{className:\"created-date\",children:new Date(q.created_at).toLocaleDateString()})]})]},q.id);}),filteredQuestions.length===0&&/*#__PURE__*/_jsx(\"div\",{className:\"no-questions\",children:/*#__PURE__*/_jsx(\"p\",{children:\"No questions found matching your criteria\"})})]}),selectedDiagram&&/*#__PURE__*/_jsx(\"div\",{className:\"diagram-modal\",onClick:()=>setSelectedDiagram(null),children:/*#__PURE__*/_jsxs(\"div\",{className:\"diagram-modal-content\",onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsx(\"button\",{className:\"close-diagram-btn\",onClick:()=>setSelectedDiagram(null),children:\"\\u2715\"}),/*#__PURE__*/_jsx(\"img\",{src:\"http://localhost:5000/api/diagram/\".concat(selectedDiagram.paperId,\"/\").concat(selectedDiagram.filename),alt:\"Diagram\",className:\"diagram-full\",onLoad:()=>console.log('Modal diagram loaded'),onError:e=>console.error('Modal diagram failed to load',e)})]})}),selectedDiagram&&console.log('Modal should be visible, selectedDiagram:',selectedDiagram),selectedSolution&&/*#__PURE__*/_jsx(\"div\",{className:\"solution-modal\",onClick:()=>setSelectedSolution(null),children:/*#__PURE__*/_jsxs(\"div\",{className:\"solution-modal-content\",onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"solution-modal-header\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"\\u2728 Step-by-Step Solution - Q\",selectedSolution.questionNumber]}),/*#__PURE__*/_jsx(\"span\",{className:\"solution-type-badge\",children:selectedSolution.questionType})]}),/*#__PURE__*/_jsx(\"button\",{className:\"close-solution-btn\",onClick:()=>setSelectedSolution(null),children:\"\\u2715\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"solution-modal-body\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"solution-question-box\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\uD83D\\uDCDD Question:\"}),/*#__PURE__*/_jsx(\"p\",{children:selectedSolution.questionText})]}),/*#__PURE__*/_jsx(\"div\",{className:\"solution-content\",children:/*#__PURE__*/_jsx(\"pre\",{style:{whiteSpace:'pre-wrap',fontFamily:'inherit'},children:selectedSolution.solution})})]})]})})]})});};export default ParsedQuestionsView;","map":{"version":3,"names":["React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ParsedQuestionsView","_ref","paperId","onClose","embedded","questions","setQuestions","loading","setLoading","filter","setFilter","searchTerm","setSearchTerm","selectedDiagram","setSelectedDiagram","selectedPaper","setSelectedPaper","groupByPaper","setGroupByPaper","selectedReasoning","setSelectedReasoning","solvingQuestion","setSolvingQuestion","selectedSolution","setSelectedSolution","parseQuestionContent","text","mainQuestion","mcqOptions","instructions","inlineInstructionMatch","match","trim","remainingText","replace","mcqPattern","mcqMatches","matchAll","length","map","label","forEach","formatQuestionText","parts","split","children","part","idx","trimmedPart","isSubPart","test","className","fetchParsedQuestions","url","concat","response","get","data","err","console","error","handleSolveQuestion","question","post","question_text","question_type","subject","chapter_context","success","questionNumber","question_number","questionText","questionType","solution","parsedSolution","parsed_solution","source","paper_id","textbook_id","chapter_name","timestamp","Date","toISOString","log","saveErr","alert","_error$response","_error$response$data","message","filteredQuestions","q","matchesFilter","matchesSearch","toLowerCase","includes","matchesPaper","parseInt","questionTypes","Set","papers","Map","id","title","paper_title","values","groupedQuestions","key","push","containerClass","innerClass","onClick","type","placeholder","value","onChange","e","target","paper","checked","Object","group","index","parsedData","parsed_data","JSON","parse","displayNumber","numberMatch","has_diagram","diagram_files","filename","marks","disabled","option","sub_parts","src","alt","onError","style","display","created_at","toLocaleDateString","stopPropagation","onLoad","whiteSpace","fontFamily"],"sources":["D:/AI/_Programs/CBSE/aqnamic/frontend/src/components/ParsedQuestionsView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './ParsedQuestionsView.css';\n\nconst ParsedQuestionsView = ({ paperId, onClose, embedded = false }) => {\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDiagram, setSelectedDiagram] = useState(null);\n  const [selectedPaper, setSelectedPaper] = useState(paperId || 'all');\n  const [groupByPaper, setGroupByPaper] = useState(!paperId); // Group by default when viewing all\n  const [selectedReasoning, setSelectedReasoning] = useState(null);\n  const [solvingQuestion, setSolvingQuestion] = useState(false);\n  const [selectedSolution, setSelectedSolution] = useState(null);\n\n  // Parse question text to extract main question, MCQ options, and instructions\n  const parseQuestionContent = (text) => {\n    if (!text) return { mainQuestion: '', mcqOptions: [], instructions: '' };\n    \n    // Extract inline instructions in format: [Instruction: ...]\n    const inlineInstructionMatch = text.match(/\\[Instruction:\\s*([^\\]]+)\\]/i);\n    const instructions = inlineInstructionMatch ? inlineInstructionMatch[1].trim() : '';\n    \n    // Remove inline instruction from text\n    let remainingText = inlineInstructionMatch ? text.replace(inlineInstructionMatch[0], '').trim() : text;\n    \n    // Extract MCQ options: (A), (B), (C), (D) or A), B), C), D)\n    const mcqPattern = /\\(([A-D])\\)\\s*([^\\(\\)]+?)(?=\\([A-D]\\)|$)/gi;\n    const mcqMatches = [...remainingText.matchAll(mcqPattern)];\n    \n    let mcqOptions = [];\n    let mainQuestion = remainingText;\n    \n    if (mcqMatches.length >= 2) {\n      // Extract MCQ options\n      mcqOptions = mcqMatches.map(match => ({\n        label: match[1],\n        text: match[2].trim()\n      }));\n      \n      // Remove MCQ options from main question\n      mcqMatches.forEach(match => {\n        mainQuestion = mainQuestion.replace(match[0], '');\n      });\n      mainQuestion = mainQuestion.trim();\n    }\n    \n    return { mainQuestion, mcqOptions, instructions };\n  };\n  \n  // Format question text to show sub-parts on new lines\n  const formatQuestionText = (text) => {\n    if (!text) return text;\n    \n    // Split by common sub-part patterns: (a), (b), (c) or a), b), c) or (i), (ii), i), ii)\n    // Look ahead to split before these patterns\n    const parts = text.split(/(?=\\n?\\s*\\(?[a-z]\\)\\s)|(?=\\n?\\s*\\(?[ivx]+\\)\\s)/i);\n    \n    return (\n      <div>\n        {parts.map((part, idx) => {\n          const trimmedPart = part.trim();\n          if (!trimmedPart) return null;\n          \n          // Check if this part starts with a sub-number like (a), a), (i), i), etc.\n          const isSubPart = /^\\(?[a-z]\\)|^\\(?[ivx]+\\)/i.test(trimmedPart);\n          \n          return (\n            <div key={idx} className={isSubPart ? 'sub-part-line' : 'main-question-line'}>\n              {trimmedPart}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    fetchParsedQuestions();\n  }, [paperId]);\n\n  const fetchParsedQuestions = async () => {\n    try {\n      const url = paperId \n        ? `http://localhost:5000/api/parsed-questions?paper_id=${paperId}`\n        : 'http://localhost:5000/api/parsed-questions';\n      \n      const response = await axios.get(url);\n      setQuestions(response.data);\n    } catch (err) {\n      console.error('Error fetching parsed questions:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSolveQuestion = async (question) => {\n    setSolvingQuestion(true);\n    try {\n      const response = await axios.post('http://localhost:5000/api/solve-question', {\n        question_text: question.question_text,\n        question_type: question.question_type,\n        subject: question.subject,\n        chapter_context: null\n      });\n      \n      if (response.data.success) {\n        setSelectedSolution({\n          questionNumber: question.question_number,\n          questionText: question.question_text,\n          questionType: question.question_type,\n          solution: response.data.solution,\n          parsedSolution: response.data.parsed_solution\n        });\n        \n        // Save to Question Bank\n        try {\n          await axios.post('http://localhost:5000/api/save-solved-question', {\n            question_text: question.question_text,\n            solution: response.data.solution,\n            source: 'all_questions',\n            paper_id: question.paper_id,\n            textbook_id: null,\n            chapter_name: null,\n            timestamp: new Date().toISOString()\n          });\n          console.log('✅ Question saved to Question Bank');\n        } catch (saveErr) {\n          console.error('Failed to save to Question Bank:', saveErr);\n        }\n      } else {\n        alert('Failed to solve question: ' + (response.data.error || 'Unknown error'));\n      }\n    } catch (error) {\n      console.error('Error solving question:', error);\n      alert('Error solving question: ' + (error.response?.data?.error || error.message));\n    } finally {\n      setSolvingQuestion(false);\n    }\n  };\n\n  const filteredQuestions = questions.filter(q => {\n    const matchesFilter = filter === 'all' || q.question_type === filter;\n    const matchesSearch = q.question_text.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         q.question_number.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesPaper = selectedPaper === 'all' || q.paper_id === parseInt(selectedPaper);\n    return matchesFilter && matchesSearch && matchesPaper;\n  });\n\n  const questionTypes = [...new Set(questions.map(q => q.question_type))];\n  \n  // Get unique papers\n  const papers = [...new Map(questions.map(q => [q.paper_id, { id: q.paper_id, title: q.paper_title, subject: q.subject }])).values()];\n  \n  // Group questions by paper\n  const groupedQuestions = {};\n  filteredQuestions.forEach(q => {\n    const key = `${q.paper_id}_${q.paper_title}`;\n    if (!groupedQuestions[key]) {\n      groupedQuestions[key] = {\n        paper_id: q.paper_id,\n        paper_title: q.paper_title,\n        subject: q.subject,\n        questions: []\n      };\n    }\n    groupedQuestions[key].questions.push(q);\n  });\n\n  const containerClass = embedded ? \"parsed-questions-embedded\" : \"parsed-questions-modal\";\n  const innerClass = embedded ? \"parsed-questions-content\" : \"parsed-questions-container\";\n\n  return (\n    <div className={containerClass}>\n      <div className={innerClass}>\n        <div className=\"parsed-header\">\n          <div>\n            <h2>📋 All Parsed Questions</h2>\n            <p>{questions.length} questions from {papers.length} paper(s)</p>\n          </div>\n          {!embedded && <button className=\"close-btn\" onClick={onClose}>✕</button>}\n        </div>\n\n        <div className=\"parsed-controls\">\n          <input\n            type=\"text\"\n            placeholder=\"🔍 Search questions...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"search-input\"\n          />\n\n          {!paperId && (\n            <select \n              value={selectedPaper} \n              onChange={(e) => setSelectedPaper(e.target.value)}\n              className=\"filter-select\"\n            >\n              <option value=\"all\">All Papers ({papers.length})</option>\n              {papers.map(paper => (\n                <option key={paper.id} value={paper.id}>\n                  {paper.title} - {paper.subject}\n                </option>\n              ))}\n            </select>\n          )}\n\n          <select \n            value={filter} \n            onChange={(e) => setFilter(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">All Types</option>\n            {questionTypes.map(type => (\n              <option key={type} value={type}>{type}</option>\n            ))}\n          </select>\n\n          {!paperId && !embedded && (\n            <label className=\"group-toggle\">\n              <input\n                type=\"checkbox\"\n                checked={groupByPaper}\n                onChange={(e) => setGroupByPaper(e.target.checked)}\n              />\n              Group by Paper\n            </label>\n          )}\n\n          <div className=\"results-count\">\n            {filteredQuestions.length} of {questions.length} questions\n          </div>\n        </div>\n\n        {loading ? (\n          <div className=\"loading-state\">\n            <div className=\"spinner\"></div>\n            <p>Loading parsed questions...</p>\n          </div>\n        ) : groupByPaper && !paperId ? (\n          <div className=\"questions-list\">\n            {Object.values(groupedQuestions).map((group) => (\n              <div key={group.paper_id} className=\"paper-group\">\n                <div className=\"paper-group-header\">\n                  <h3>📄 {group.paper_title}</h3>\n                  <span className=\"paper-subject\">{group.subject}</span>\n                  <span className=\"question-count-badge\">{group.questions.length} questions</span>\n                </div>\n                {group.questions.map((q, index) => {\n                  const parsedData = q.parsed_data ? JSON.parse(q.parsed_data) : {};\n                  \n                  let displayNumber = q.question_number;\n                  const numberMatch = q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);\n                  if (numberMatch) {\n                    displayNumber = numberMatch[1];\n                  }\n                  \n                  return (\n                    <div key={q.id} className=\"parsed-question-card\">\n                      <div className=\"question-header-row\">\n                        <div className=\"question-number-badge\">\n                          Q{displayNumber}\n                        </div>\n                        \n                        <div className=\"question-meta-tags\">\n                          <span className={`type-badge ${q.question_type}`}>\n                            {q.question_type}\n                          </span>\n                          \n                          {q.has_diagram && parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                            <span \n                              className=\"diagram-badge clickable\"\n                              onClick={() => {\n                                console.log('Diagram badge clicked:', { paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                                setSelectedDiagram({ paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                              }}\n                            >\n                              📊 Diagram {parsedData.diagram_files.length > 1 ? `(${parsedData.diagram_files.length})` : ''}\n                            </span>\n                          )}\n                          \n                          {q.marks && (\n                            <span className=\"marks-badge\">{q.marks} marks</span>\n                          )}\n                          \n                          <button \n                            className=\"solve-btn\"\n                            onClick={() => handleSolveQuestion(q)}\n                            disabled={solvingQuestion}\n                            title=\"Get detailed step-by-step solution\"\n                          >\n                            {solvingQuestion ? '⏳ Solving...' : '✨ Solve Question'}\n                          </button>\n                        </div>\n                      </div>\n\n                      {(() => {\n                        const { mainQuestion, mcqOptions, instructions } = parseQuestionContent(q.question_text);\n                        \n                        return (\n                          <>\n                            <div className=\"question-text-display\">\n                              {formatQuestionText(mainQuestion)}\n                              {instructions && (\n                                <span className=\"inline-instruction\"> [Instruction: {instructions}]</span>\n                              )}\n                            </div>\n                            \n                            {mcqOptions.length > 0 && (\n                              <div className=\"mcq-options-display\">\n                                {mcqOptions.map((option, idx) => (\n                                  <div key={idx} className=\"mcq-option\">\n                                    <span className=\"mcq-option-label\">({option.label})</span>\n                                    <span className=\"mcq-option-text\">{option.text}</span>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </>\n                        );\n                      })()}\n\n                      {parsedData.sub_parts && parsedData.sub_parts.length > 0 && (\n                        <div className=\"sub-parts-display\">\n                          <strong>Sub-parts:</strong>\n                          <div className=\"sub-parts-list\">\n                            {parsedData.sub_parts.map((part, idx) => (\n                              <div key={idx} className=\"sub-part-item\">{part}</div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                        <div className=\"diagrams-inline-display\">\n                          <strong>📊 Diagram{parsedData.diagram_files.length > 1 ? 's' : ''}:</strong>\n                          <div className=\"diagrams-inline-container\">\n                            {parsedData.diagram_files.map((filename, idx) => (\n                              <div key={idx} className=\"diagram-inline-wrapper\">\n                                <img \n                                  src={`http://localhost:5000/api/diagram/${q.paper_id}/${filename}`}\n                                  alt={`Diagram ${idx + 1}`}\n                                  className=\"diagram-inline\"\n                                  onClick={() => {\n                                    console.log('Diagram clicked:', { paperId: q.paper_id, filename });\n                                    setSelectedDiagram({ paperId: q.paper_id, filename });\n                                  }}\n                                  onError={(e) => e.target.style.display = 'none'}\n                                />\n                                <span className=\"diagram-caption\">Click to enlarge</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      <div className=\"question-footer\">\n                        <span className=\"created-date\">\n                          {new Date(q.created_at).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"questions-list\">\n            {filteredQuestions.map((q, index) => {\n              const parsedData = q.parsed_data ? JSON.parse(q.parsed_data) : {};\n              \n              // Extract question number from question_text if it starts with a number\n              let displayNumber = q.question_number;\n              const numberMatch = q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);\n              if (numberMatch) {\n                displayNumber = numberMatch[1];\n              }\n              \n              return (\n                <div key={q.id} className=\"parsed-question-card\">\n                  <div className=\"question-header-row\">\n                    <div className=\"question-number-badge\">\n                      Q{displayNumber}\n                    </div>\n                    \n                    <div className=\"question-meta-tags\">\n                      <span className={`type-badge ${q.question_type}`}>\n                        {q.question_type}\n                      </span>\n                      \n                      {q.has_diagram && parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                        <span \n                          className=\"diagram-badge clickable\"\n                          onClick={() => {\n                            console.log('Diagram badge clicked (ungrouped):', { paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                            setSelectedDiagram({ paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                          }}\n                        >\n                          📊 Diagram {parsedData.diagram_files.length > 1 ? `(${parsedData.diagram_files.length})` : ''}\n                        </span>\n                      )}\n                      \n                      {q.marks && (\n                        <span className=\"marks-badge\">{q.marks} marks</span>\n                      )}\n                      \n                      <button \n                        className=\"solve-btn\"\n                        onClick={() => handleSolveQuestion(q)}\n                        disabled={solvingQuestion}\n                        title=\"Get detailed step-by-step solution\"\n                      >\n                        {solvingQuestion ? '⏳ Solving...' : '✨ Solve Question'}\n                      </button>\n                    </div>\n                  </div>\n\n                  {(() => {\n                    const { mainQuestion, mcqOptions, instructions } = parseQuestionContent(q.question_text);\n                    \n                    return (\n                      <>\n                        <div className=\"question-text-display\">\n                          {formatQuestionText(mainQuestion)}\n                          {instructions && (\n                            <span className=\"inline-instruction\"> [Instruction: {instructions}]</span>\n                          )}\n                        </div>\n                        \n                        {mcqOptions.length > 0 && (\n                          <div className=\"mcq-options-display\">\n                            {mcqOptions.map((option, idx) => (\n                              <div key={idx} className=\"mcq-option\">\n                                <span className=\"mcq-option-label\">({option.label})</span>\n                                <span className=\"mcq-option-text\">{option.text}</span>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </>\n                    );\n                  })()}\n\n                  {parsedData.sub_parts && parsedData.sub_parts.length > 0 && (\n                    <div className=\"sub-parts-display\">\n                      <strong>Sub-parts:</strong>\n                      <div className=\"sub-parts-list\">\n                        {parsedData.sub_parts.map((part, idx) => (\n                          <div key={idx} className=\"sub-part-item\">{part}</div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                    <div className=\"diagrams-inline-display\">\n                      <strong>📊 Diagram{parsedData.diagram_files.length > 1 ? 's' : ''}:</strong>\n                      <div className=\"diagrams-inline-container\">\n                        {parsedData.diagram_files.map((filename, idx) => (\n                          <div key={idx} className=\"diagram-inline-wrapper\">\n                            <img \n                              src={`http://localhost:5000/api/diagram/${q.paper_id}/${filename}`}\n                              alt={`Diagram ${idx + 1}`}\n                              className=\"diagram-inline\"\n                              onClick={() => {\n                                console.log('Diagram clicked (ungrouped):', { paperId: q.paper_id, filename });\n                                setSelectedDiagram({ paperId: q.paper_id, filename });\n                              }}\n                              onError={(e) => e.target.style.display = 'none'}\n                            />\n                            <span className=\"diagram-caption\">Click to enlarge</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"question-footer\">\n                    <span className=\"paper-info\">\n                      📄 {q.paper_title} • {q.subject}\n                    </span>\n                    <span className=\"created-date\">\n                      {new Date(q.created_at).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n              );\n            })}\n\n            {filteredQuestions.length === 0 && (\n              <div className=\"no-questions\">\n                <p>No questions found matching your criteria</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Diagram Modal */}\n        {selectedDiagram && (\n          <div className=\"diagram-modal\" onClick={() => setSelectedDiagram(null)}>\n            <div className=\"diagram-modal-content\" onClick={(e) => e.stopPropagation()}>\n              <button className=\"close-diagram-btn\" onClick={() => setSelectedDiagram(null)}>✕</button>\n              <img \n                src={`http://localhost:5000/api/diagram/${selectedDiagram.paperId}/${selectedDiagram.filename}`}\n                alt=\"Diagram\"\n                className=\"diagram-full\"\n                onLoad={() => console.log('Modal diagram loaded')}\n                onError={(e) => console.error('Modal diagram failed to load', e)}\n              />\n            </div>\n          </div>\n        )}\n        {selectedDiagram && console.log('Modal should be visible, selectedDiagram:', selectedDiagram)}\n\n        {/* Solution Modal */}\n        {selectedSolution && (\n          <div className=\"solution-modal\" onClick={() => setSelectedSolution(null)}>\n            <div className=\"solution-modal-content\" onClick={(e) => e.stopPropagation()}>\n              <div className=\"solution-modal-header\">\n                <div>\n                  <h3>✨ Step-by-Step Solution - Q{selectedSolution.questionNumber}</h3>\n                  <span className=\"solution-type-badge\">{selectedSolution.questionType}</span>\n                </div>\n                <button className=\"close-solution-btn\" onClick={() => setSelectedSolution(null)}>✕</button>\n              </div>\n              \n              <div className=\"solution-modal-body\">\n                {/* Question Display */}\n                <div className=\"solution-question-box\">\n                  <h4>📝 Question:</h4>\n                  <p>{selectedSolution.questionText}</p>\n                </div>\n\n                {/* Full Solution */}\n                <div className=\"solution-content\">\n                  <pre style={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit' }}>\n                    {selectedSolution.solution}\n                  </pre>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ParsedQuestionsView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}