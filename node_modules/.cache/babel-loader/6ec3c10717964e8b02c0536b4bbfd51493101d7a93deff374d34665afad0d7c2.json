{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI\\\\_Programs\\\\CBSE\\\\aqnamic\\\\frontend\\\\src\\\\components\\\\SingleQuestionUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './SingleQuestionUpload.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SingleQuestionUpload = ({\n  onClose,\n  onQuestionParsed\n}) => {\n  _s();\n  const [inputMethod, setInputMethod] = useState('text'); // 'text', 'paste'\n  const [questionText, setQuestionText] = useState('');\n  const [pastedImage, setPastedImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [parsedQuestion, setParsedQuestion] = useState(null);\n  const [solution, setSolution] = useState(null);\n  const [solving, setSolving] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('Solving...');\n  const handlePaste = async e => {\n    var _e$clipboardData;\n    const items = (_e$clipboardData = e.clipboardData) === null || _e$clipboardData === void 0 ? void 0 : _e$clipboardData.items;\n    if (!items) return;\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      if (item.type.indexOf('image') !== -1) {\n        const blob = item.getAsFile();\n        if (blob) {\n          setPastedImage(blob);\n          setError('');\n\n          // Create preview URL\n          const reader = new FileReader();\n          reader.onload = event => {\n            // Store the data URL for preview\n            setPastedImage({\n              blob: blob,\n              preview: event.target.result,\n              name: `pasted-image-${Date.now()}.png`,\n              size: blob.size\n            });\n          };\n          reader.readAsDataURL(blob);\n          console.log('Image pasted from clipboard');\n          break;\n        }\n      }\n    }\n  };\n  const handleClearPastedImage = () => {\n    setPastedImage(null);\n  };\n  const handleSubmit = async () => {\n    if (inputMethod === 'text' && !questionText.trim()) {\n      setError('Please enter question text');\n      return;\n    }\n    if (inputMethod === 'paste' && !pastedImage) {\n      setError('Please paste an image (Ctrl+V or Cmd+V)');\n      return;\n    }\n    setLoading(true);\n    setSolving(true);\n    setError('');\n    try {\n      let questionToSolve = questionText;\n\n      // If image input, extract text using OCR first\n      if (inputMethod === 'paste' && pastedImage) {\n        // Step 1: Extract text from image using OCR\n        setLoadingMessage('Extracting text from image...');\n        const ocrFormData = new FormData();\n        ocrFormData.append('file', pastedImage.blob, pastedImage.name);\n        ocrFormData.append('input_type', 'file');\n        ocrFormData.append('file_type', 'png');\n        const ocrResponse = await axios.post('http://localhost:5000/api/parse-single-question', ocrFormData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        if (ocrResponse.data.success && ocrResponse.data.question) {\n          questionToSolve = ocrResponse.data.question.question_text;\n          console.log('Extracted text from image:', questionToSolve);\n        } else {\n          setError('Failed to extract text from image. Please try typing the question instead.');\n          setLoading(false);\n          setSolving(false);\n          return;\n        }\n      }\n\n      // Step 2: Solve the question using the extracted or typed text\n      setLoadingMessage('Solving question...');\n      const response = await axios.post('http://localhost:5000/api/solve-question', {\n        question_text: questionToSolve,\n        question_type: 'unknown',\n        subject: null,\n        chapter_context: null\n      });\n      if (response.data.success) {\n        setSolution({\n          questionText: questionToSolve,\n          solution: response.data.solution,\n          parsedSolution: response.data.parsed_solution\n        });\n        setParsedQuestion({\n          question_text: questionToSolve\n        });\n        if (onQuestionParsed) {\n          onQuestionParsed({\n            question_text: questionToSolve\n          });\n        }\n      } else {\n        setError(response.data.error || 'Failed to solve question');\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error solving question:', err);\n      setError('Error: ' + (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message));\n    } finally {\n      setLoading(false);\n      setSolving(false);\n    }\n  };\n  const handleReset = () => {\n    setQuestionText('');\n    setPastedImage(null);\n    setParsedQuestion(null);\n    setSolution(null);\n    setError('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"single-question-modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"single-question-modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-question-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u2728 Solve One Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: onClose,\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), !parsedQuestion ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-method-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `method-btn ${inputMethod === 'text' ? 'active' : ''}`,\n            onClick: () => setInputMethod('text'),\n            children: \"\\u270D\\uFE0F Text Input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `method-btn ${inputMethod === 'paste' ? 'active' : ''}`,\n            onClick: () => setInputMethod('paste'),\n            children: \"\\uD83D\\uDCCB Paste Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), inputMethod === 'text' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Enter Question Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: questionText,\n            onChange: e => setQuestionText(e.target.value),\n            placeholder: \"Type or paste your question here... Example:\\n1. What is the capital of France?\\n(A) London\\n(B) Paris\\n(C) Berlin\\n(D) Madrid\",\n            rows: 12,\n            className: \"question-textarea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"char-count\",\n            children: [questionText.length, \" characters\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this), inputMethod === 'paste' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paste-input-section\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"paste-area\",\n            onPaste: handlePaste,\n            tabIndex: 0,\n            children: !pastedImage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"paste-icon\",\n                children: \"\\uD83D\\uDCCB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"paste-instruction\",\n                children: [\"Press \", /*#__PURE__*/_jsxDEV(\"kbd\", {\n                  children: \"Ctrl+V\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 31\n                }, this), \" (or \", /*#__PURE__*/_jsxDEV(\"kbd\", {\n                  children: \"Cmd+V\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 53\n                }, this), \" on Mac) to paste an image\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"paste-hint\",\n                children: \"Take a screenshot or copy an image, then paste it here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pasted-image-preview\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: pastedImage.preview,\n                alt: \"Pasted question\",\n                className: \"preview-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pasted-image-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"pasted-image-name\",\n                  children: [\"\\uD83D\\uDCF7 \", pastedImage.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"pasted-image-size\",\n                  children: [(pastedImage.size / 1024).toFixed(2), \" KB\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"clear-pasted-btn\",\n                onClick: handleClearPastedImage,\n                children: \"\\u2715 Clear Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [\"\\u26A0\\uFE0F \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-btn\",\n            onClick: handleSubmit,\n            disabled: loading || inputMethod === 'text' && !questionText.trim() || inputMethod === 'paste' && !pastedImage,\n            children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"spinner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }, this), loadingMessage]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: \"\\u2728 Solve\"\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-btn\",\n            onClick: onClose,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parsed-result\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\u2728 Solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"solution-question-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uD83D\\uDCDD Question:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: solution === null || solution === void 0 ? void 0 : solution.questionText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), solution && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"solution-content\",\n          children: (() => {\n            const lines = solution.solution.split('\\n');\n            let inDiagram = false;\n            let diagramLines = [];\n            let lastWasEmpty = false;\n            let lastWasSection = false;\n            let currentSection = null;\n            const elements = [];\n            lines.forEach((line, idx) => {\n              // Detect diagram start/end\n              if (line.match(/^\\*\\*Diagram/i) || line.includes('```')) {\n                inDiagram = !inDiagram;\n                if (!inDiagram && diagramLines.length > 0) {\n                  const diagram = diagramLines.join('\\n');\n                  diagramLines = [];\n                  elements.push(/*#__PURE__*/_jsxDEV(\"pre\", {\n                    className: \"solution-diagram\",\n                    children: diagram\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 39\n                  }, this));\n                  lastWasEmpty = false;\n                  lastWasSection = true;\n                }\n                return;\n              }\n\n              // Collect diagram lines\n              if (inDiagram) {\n                diagramLines.push(line);\n                return;\n              }\n\n              // Highlight section headers\n              if (line.match(/^\\*\\*.*\\*\\*:?$/)) {\n                const sectionName = line.replace(/\\*\\*/g, '').replace(/:/g, '').trim().toLowerCase();\n                currentSection = sectionName;\n                elements.push(/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"solution-section-header\",\n                  children: line.replace(/\\*\\*/g, '').replace(/:/g, '')\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 37\n                }, this));\n                lastWasEmpty = false;\n                lastWasSection = true;\n                return;\n              }\n\n              // Highlight final answer\n              if (line.match(/FINAL ANSWER:/i)) {\n                elements.push(/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"final-answer-box\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"final-answer-icon\",\n                    children: \"\\uD83C\\uDFAF\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"final-answer-text\",\n                    dangerouslySetInnerHTML: {\n                      __html: line.replace(/FINAL ANSWER:/i, '').trim()\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 27\n                  }, this)]\n                }, idx, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 25\n                }, this));\n                lastWasEmpty = false;\n                lastWasSection = true;\n                return;\n              }\n\n              // Highlight step numbers\n              if (line.match(/^(Step \\d+:|^\\d+\\.)/)) {\n                elements.push(/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"solution-step\",\n                  dangerouslySetInnerHTML: {\n                    __html: line\n                  }\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 25\n                }, this));\n                lastWasEmpty = false;\n                lastWasSection = false;\n                return;\n              }\n\n              // Handle empty lines\n              if (!line.trim()) {\n                const compactSections = ['given', 'find', 'formula', 'concept', 'formula/concept'];\n                const isCompactSection = compactSections.some(s => currentSection && currentSection.includes(s));\n                if (!lastWasEmpty && lastWasSection && !isCompactSection) {\n                  elements.push(/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"section-spacer\"\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 336,\n                    columnNumber: 39\n                  }, this));\n                  lastWasEmpty = true;\n                }\n                return;\n              }\n\n              // Regular text\n              const compactSections = ['given', 'find', 'formula', 'concept', 'formula/concept'];\n              const isCompactSection = compactSections.some(s => currentSection && currentSection.includes(s));\n              const textClass = isCompactSection ? 'solution-text compact' : 'solution-text';\n              elements.push(/*#__PURE__*/_jsxDEV(\"p\", {\n                className: textClass,\n                dangerouslySetInnerHTML: {\n                  __html: line\n                }\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 23\n              }, this));\n              lastWasEmpty = false;\n              lastWasSection = false;\n            });\n            return elements;\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"parse-another-btn\",\n            onClick: handleReset,\n            children: \"\\u2728 Solve Another Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-result-btn\",\n            onClick: onClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(SingleQuestionUpload, \"yRp0NIW8uGb7MByb62gcts7olzs=\");\n_c = SingleQuestionUpload;\nexport default SingleQuestionUpload;\nvar _c;\n$RefreshReg$(_c, \"SingleQuestionUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","SingleQuestionUpload","onClose","onQuestionParsed","_s","inputMethod","setInputMethod","questionText","setQuestionText","pastedImage","setPastedImage","loading","setLoading","error","setError","parsedQuestion","setParsedQuestion","solution","setSolution","solving","setSolving","loadingMessage","setLoadingMessage","handlePaste","e","_e$clipboardData","items","clipboardData","i","length","item","type","indexOf","blob","getAsFile","reader","FileReader","onload","event","preview","target","result","name","Date","now","size","readAsDataURL","console","log","handleClearPastedImage","handleSubmit","trim","questionToSolve","ocrFormData","FormData","append","ocrResponse","post","headers","data","success","question","question_text","response","question_type","subject","chapter_context","parsedSolution","parsed_solution","err","_err$response","_err$response$data","message","handleReset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","placeholder","rows","onPaste","tabIndex","src","alt","toFixed","disabled","lines","split","inDiagram","diagramLines","lastWasEmpty","lastWasSection","currentSection","elements","forEach","line","idx","match","includes","diagram","join","push","sectionName","replace","toLowerCase","dangerouslySetInnerHTML","__html","compactSections","isCompactSection","some","s","textClass","_c","$RefreshReg$"],"sources":["D:/AI/_Programs/CBSE/aqnamic/frontend/src/components/SingleQuestionUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './SingleQuestionUpload.css';\n\nconst SingleQuestionUpload = ({ onClose, onQuestionParsed }) => {\n  const [inputMethod, setInputMethod] = useState('text'); // 'text', 'paste'\n  const [questionText, setQuestionText] = useState('');\n  const [pastedImage, setPastedImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [parsedQuestion, setParsedQuestion] = useState(null);\n  const [solution, setSolution] = useState(null);\n  const [solving, setSolving] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('Solving...');\n\n  const handlePaste = async (e) => {\n    const items = e.clipboardData?.items;\n    if (!items) return;\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      \n      if (item.type.indexOf('image') !== -1) {\n        const blob = item.getAsFile();\n        if (blob) {\n          setPastedImage(blob);\n          setError('');\n          \n          // Create preview URL\n          const reader = new FileReader();\n          reader.onload = (event) => {\n            // Store the data URL for preview\n            setPastedImage({\n              blob: blob,\n              preview: event.target.result,\n              name: `pasted-image-${Date.now()}.png`,\n              size: blob.size\n            });\n          };\n          reader.readAsDataURL(blob);\n          \n          console.log('Image pasted from clipboard');\n          break;\n        }\n      }\n    }\n  };\n\n  const handleClearPastedImage = () => {\n    setPastedImage(null);\n  };\n\n  const handleSubmit = async () => {\n    if (inputMethod === 'text' && !questionText.trim()) {\n      setError('Please enter question text');\n      return;\n    }\n\n    if (inputMethod === 'paste' && !pastedImage) {\n      setError('Please paste an image (Ctrl+V or Cmd+V)');\n      return;\n    }\n\n    setLoading(true);\n    setSolving(true);\n    setError('');\n\n    try {\n      let questionToSolve = questionText;\n\n      // If image input, extract text using OCR first\n      if (inputMethod === 'paste' && pastedImage) {\n        // Step 1: Extract text from image using OCR\n        setLoadingMessage('Extracting text from image...');\n        \n        const ocrFormData = new FormData();\n        ocrFormData.append('file', pastedImage.blob, pastedImage.name);\n        ocrFormData.append('input_type', 'file');\n        ocrFormData.append('file_type', 'png');\n\n        const ocrResponse = await axios.post('http://localhost:5000/api/parse-single-question', ocrFormData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n\n        if (ocrResponse.data.success && ocrResponse.data.question) {\n          questionToSolve = ocrResponse.data.question.question_text;\n          console.log('Extracted text from image:', questionToSolve);\n        } else {\n          setError('Failed to extract text from image. Please try typing the question instead.');\n          setLoading(false);\n          setSolving(false);\n          return;\n        }\n      }\n\n      // Step 2: Solve the question using the extracted or typed text\n      setLoadingMessage('Solving question...');\n      \n      const response = await axios.post('http://localhost:5000/api/solve-question', {\n        question_text: questionToSolve,\n        question_type: 'unknown',\n        subject: null,\n        chapter_context: null\n      });\n\n      if (response.data.success) {\n        setSolution({\n          questionText: questionToSolve,\n          solution: response.data.solution,\n          parsedSolution: response.data.parsed_solution\n        });\n        setParsedQuestion({ question_text: questionToSolve });\n        if (onQuestionParsed) {\n          onQuestionParsed({ question_text: questionToSolve });\n        }\n      } else {\n        setError(response.data.error || 'Failed to solve question');\n      }\n    } catch (err) {\n      console.error('Error solving question:', err);\n      setError('Error: ' + (err.response?.data?.error || err.message));\n    } finally {\n      setLoading(false);\n      setSolving(false);\n    }\n  };\n\n  const handleReset = () => {\n    setQuestionText('');\n    setPastedImage(null);\n    setParsedQuestion(null);\n    setSolution(null);\n    setError('');\n  };\n\n  return (\n    <div className=\"single-question-modal\">\n      <div className=\"single-question-modal-content\">\n        <div className=\"single-question-header\">\n          <h2>✨ Solve One Question</h2>\n          <button className=\"close-btn\" onClick={onClose}>✕</button>\n        </div>\n\n        {!parsedQuestion ? (\n          <>\n            <div className=\"input-method-selector\">\n              <button\n                className={`method-btn ${inputMethod === 'text' ? 'active' : ''}`}\n                onClick={() => setInputMethod('text')}\n              >\n                ✍️ Text Input\n              </button>\n              <button\n                className={`method-btn ${inputMethod === 'paste' ? 'active' : ''}`}\n                onClick={() => setInputMethod('paste')}\n              >\n                📋 Paste Image\n              </button>\n            </div>\n\n            {inputMethod === 'text' && (\n              <div className=\"text-input-section\">\n                <label>Enter Question Text:</label>\n                <textarea\n                  value={questionText}\n                  onChange={(e) => setQuestionText(e.target.value)}\n                  placeholder=\"Type or paste your question here...&#10;&#10;Example:&#10;1. What is the capital of France?&#10;(A) London&#10;(B) Paris&#10;(C) Berlin&#10;(D) Madrid\"\n                  rows={12}\n                  className=\"question-textarea\"\n                />\n                <div className=\"char-count\">\n                  {questionText.length} characters\n                </div>\n              </div>\n            )}\n\n            {inputMethod === 'paste' && (\n              <div className=\"paste-input-section\">\n                <div \n                  className=\"paste-area\"\n                  onPaste={handlePaste}\n                  tabIndex={0}\n                >\n                  {!pastedImage ? (\n                    <>\n                      <div className=\"paste-icon\">📋</div>\n                      <div className=\"paste-instruction\">\n                        Press <kbd>Ctrl+V</kbd> (or <kbd>Cmd+V</kbd> on Mac) to paste an image\n                      </div>\n                      <div className=\"paste-hint\">\n                        Take a screenshot or copy an image, then paste it here\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"pasted-image-preview\">\n                      <img \n                        src={pastedImage.preview} \n                        alt=\"Pasted question\" \n                        className=\"preview-image\"\n                      />\n                      <div className=\"pasted-image-info\">\n                        <div className=\"pasted-image-name\">📷 {pastedImage.name}</div>\n                        <div className=\"pasted-image-size\">\n                          {(pastedImage.size / 1024).toFixed(2)} KB\n                        </div>\n                      </div>\n                      <button \n                        className=\"clear-pasted-btn\"\n                        onClick={handleClearPastedImage}\n                      >\n                        ✕ Clear Image\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {error && (\n              <div className=\"error-message\">\n                ⚠️ {error}\n              </div>\n            )}\n\n            <div className=\"action-buttons\">\n              <button\n                className=\"submit-btn\"\n                onClick={handleSubmit}\n                disabled={loading || (inputMethod === 'text' && !questionText.trim()) || (inputMethod === 'paste' && !pastedImage)}\n              >\n                {loading ? (\n                  <>\n                    <span className=\"spinner\"></span>\n                    {loadingMessage}\n                  </>\n                ) : (\n                  <>\n                    ✨ Solve\n                  </>\n                )}\n              </button>\n              <button className=\"cancel-btn\" onClick={onClose}>\n                Cancel\n              </button>\n            </div>\n          </>\n        ) : (\n          <div className=\"parsed-result\">\n            <div className=\"result-header\">\n              <h3>✨ Solution</h3>\n            </div>\n\n            {/* Question Display */}\n            <div className=\"solution-question-box\">\n              <h4>📝 Question:</h4>\n              <p>{solution?.questionText}</p>\n            </div>\n\n            {/* Solution Display */}\n            {solution && (\n              <div className=\"solution-content\">\n                {(() => {\n                  const lines = solution.solution.split('\\n');\n                  let inDiagram = false;\n                  let diagramLines = [];\n                  let lastWasEmpty = false;\n                  let lastWasSection = false;\n                  let currentSection = null;\n                  const elements = [];\n                  \n                  lines.forEach((line, idx) => {\n                    // Detect diagram start/end\n                    if (line.match(/^\\*\\*Diagram/i) || line.includes('```')) {\n                      inDiagram = !inDiagram;\n                      if (!inDiagram && diagramLines.length > 0) {\n                        const diagram = diagramLines.join('\\n');\n                        diagramLines = [];\n                        elements.push(<pre key={idx} className=\"solution-diagram\">{diagram}</pre>);\n                        lastWasEmpty = false;\n                        lastWasSection = true;\n                      }\n                      return;\n                    }\n                    \n                    // Collect diagram lines\n                    if (inDiagram) {\n                      diagramLines.push(line);\n                      return;\n                    }\n                    \n                    // Highlight section headers\n                    if (line.match(/^\\*\\*.*\\*\\*:?$/)) {\n                      const sectionName = line.replace(/\\*\\*/g, '').replace(/:/g, '').trim().toLowerCase();\n                      currentSection = sectionName;\n                      elements.push(<h4 key={idx} className=\"solution-section-header\">{line.replace(/\\*\\*/g, '').replace(/:/g, '')}</h4>);\n                      lastWasEmpty = false;\n                      lastWasSection = true;\n                      return;\n                    }\n                    \n                    // Highlight final answer\n                    if (line.match(/FINAL ANSWER:/i)) {\n                      elements.push(\n                        <div key={idx} className=\"final-answer-box\">\n                          <div className=\"final-answer-icon\">🎯</div>\n                          <div className=\"final-answer-text\" dangerouslySetInnerHTML={{\n                            __html: line.replace(/FINAL ANSWER:/i, '').trim()\n                          }}></div>\n                        </div>\n                      );\n                      lastWasEmpty = false;\n                      lastWasSection = true;\n                      return;\n                    }\n                    \n                    // Highlight step numbers\n                    if (line.match(/^(Step \\d+:|^\\d+\\.)/)) {\n                      elements.push(\n                        <div key={idx} className=\"solution-step\" dangerouslySetInnerHTML={{\n                          __html: line\n                        }}></div>\n                      );\n                      lastWasEmpty = false;\n                      lastWasSection = false;\n                      return;\n                    }\n                    \n                    // Handle empty lines\n                    if (!line.trim()) {\n                      const compactSections = ['given', 'find', 'formula', 'concept', 'formula/concept'];\n                      const isCompactSection = compactSections.some(s => currentSection && currentSection.includes(s));\n                      \n                      if (!lastWasEmpty && lastWasSection && !isCompactSection) {\n                        elements.push(<div key={idx} className=\"section-spacer\"></div>);\n                        lastWasEmpty = true;\n                      }\n                      return;\n                    }\n                    \n                    // Regular text\n                    const compactSections = ['given', 'find', 'formula', 'concept', 'formula/concept'];\n                    const isCompactSection = compactSections.some(s => currentSection && currentSection.includes(s));\n                    const textClass = isCompactSection ? 'solution-text compact' : 'solution-text';\n                    \n                    elements.push(\n                      <p key={idx} className={textClass} dangerouslySetInnerHTML={{\n                        __html: line\n                      }}></p>\n                    );\n                    lastWasEmpty = false;\n                    lastWasSection = false;\n                  });\n                  \n                  return elements;\n                })()}\n              </div>\n            )}\n\n            <div className=\"result-actions\">\n              <button className=\"parse-another-btn\" onClick={handleReset}>\n                ✨ Solve Another Question\n              </button>\n              <button className=\"close-result-btn\" onClick={onClose}>\n                Close\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SingleQuestionUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}