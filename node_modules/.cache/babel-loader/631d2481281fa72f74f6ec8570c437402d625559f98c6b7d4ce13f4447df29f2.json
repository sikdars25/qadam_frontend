{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI\\\\_Programs\\\\CBSE\\\\aqnamic\\\\frontend\\\\src\\\\components\\\\ParsedQuestionsView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './ParsedQuestionsView.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ParsedQuestionsView = ({\n  paperId,\n  onClose,\n  embedded = false\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDiagram, setSelectedDiagram] = useState(null);\n  const [selectedPaper, setSelectedPaper] = useState(paperId || 'all');\n  const [groupByPaper, setGroupByPaper] = useState(!paperId); // Group by default when viewing all\n  const [selectedReasoning, setSelectedReasoning] = useState(null);\n  const [solvingQuestion, setSolvingQuestion] = useState(false);\n  const [selectedSolution, setSelectedSolution] = useState(null);\n\n  // Parse question text to extract main question, MCQ options, and instructions\n  const parseQuestionContent = text => {\n    if (!text) return {\n      mainQuestion: '',\n      mcqOptions: [],\n      instructions: ''\n    };\n\n    // Extract inline instructions in format: [Instruction: ...]\n    const inlineInstructionMatch = text.match(/\\[Instruction:\\s*([^\\]]+)\\]/i);\n    const instructions = inlineInstructionMatch ? inlineInstructionMatch[1].trim() : '';\n\n    // Remove inline instruction from text\n    let remainingText = inlineInstructionMatch ? text.replace(inlineInstructionMatch[0], '').trim() : text;\n\n    // Extract MCQ options: (A), (B), (C), (D) or A), B), C), D)\n    const mcqPattern = /\\(([A-D])\\)\\s*([^\\(\\)]+?)(?=\\([A-D]\\)|$)/gi;\n    const mcqMatches = [...remainingText.matchAll(mcqPattern)];\n    let mcqOptions = [];\n    let mainQuestion = remainingText;\n    if (mcqMatches.length >= 2) {\n      // Extract MCQ options\n      mcqOptions = mcqMatches.map(match => ({\n        label: match[1],\n        text: match[2].trim()\n      }));\n\n      // Remove MCQ options from main question\n      mcqMatches.forEach(match => {\n        mainQuestion = mainQuestion.replace(match[0], '');\n      });\n      mainQuestion = mainQuestion.trim();\n    }\n    return {\n      mainQuestion,\n      mcqOptions,\n      instructions\n    };\n  };\n\n  // Format question text to show sub-parts on new lines\n  const formatQuestionText = text => {\n    if (!text) return text;\n\n    // Split by common sub-part patterns: (a), (b), (c) or a), b), c) or (i), (ii), i), ii)\n    // Look ahead to split before these patterns\n    const parts = text.split(/(?=\\n?\\s*\\(?[a-z]\\)\\s)|(?=\\n?\\s*\\(?[ivx]+\\)\\s)/i);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: parts.map((part, idx) => {\n        const trimmedPart = part.trim();\n        if (!trimmedPart) return null;\n\n        // Check if this part starts with a sub-number like (a), a), (i), i), etc.\n        const isSubPart = /^\\(?[a-z]\\)|^\\(?[ivx]+\\)/i.test(trimmedPart);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: isSubPart ? 'sub-part-line' : 'main-question-line',\n          children: trimmedPart\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  };\n  useEffect(() => {\n    fetchParsedQuestions();\n  }, [paperId]);\n  const fetchParsedQuestions = async () => {\n    try {\n      const url = paperId ? `http://localhost:5000/api/parsed-questions?paper_id=${paperId}` : 'http://localhost:5000/api/parsed-questions';\n      const response = await axios.get(url);\n      setQuestions(response.data);\n    } catch (err) {\n      console.error('Error fetching parsed questions:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const filteredQuestions = questions.filter(q => {\n    const matchesFilter = filter === 'all' || q.question_type === filter;\n    const matchesSearch = q.question_text.toLowerCase().includes(searchTerm.toLowerCase()) || q.question_number.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesPaper = selectedPaper === 'all' || q.paper_id === parseInt(selectedPaper);\n    return matchesFilter && matchesSearch && matchesPaper;\n  });\n  const questionTypes = [...new Set(questions.map(q => q.question_type))];\n\n  // Get unique papers\n  const papers = [...new Map(questions.map(q => [q.paper_id, {\n    id: q.paper_id,\n    title: q.paper_title,\n    subject: q.subject\n  }])).values()];\n\n  // Group questions by paper\n  const groupedQuestions = {};\n  filteredQuestions.forEach(q => {\n    const key = `${q.paper_id}_${q.paper_title}`;\n    if (!groupedQuestions[key]) {\n      groupedQuestions[key] = {\n        paper_id: q.paper_id,\n        paper_title: q.paper_title,\n        subject: q.subject,\n        questions: []\n      };\n    }\n    groupedQuestions[key].questions.push(q);\n  });\n  const containerClass = embedded ? \"parsed-questions-embedded\" : \"parsed-questions-modal\";\n  const innerClass = embedded ? \"parsed-questions-content\" : \"parsed-questions-container\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: containerClass,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: innerClass,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parsed-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\uD83D\\uDCCB All Parsed Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [questions.length, \" questions from \", papers.length, \" paper(s)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), !embedded && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: onClose,\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parsed-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\uD83D\\uDD0D Search questions...\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value),\n          className: \"search-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), !paperId && /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedPaper,\n          onChange: e => setSelectedPaper(e.target.value),\n          className: \"filter-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: [\"All Papers (\", papers.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), papers.map(paper => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: paper.id,\n            children: [paper.title, \" - \", paper.subject]\n          }, paper.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filter,\n          onChange: e => setFilter(e.target.value),\n          className: \"filter-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"All Types\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), questionTypes.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: type,\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), !paperId && !embedded && /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"group-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: groupByPaper,\n            onChange: e => setGroupByPaper(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), \"Group by Paper\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-count\",\n          children: [filteredQuestions.length, \" of \", questions.length, \" questions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading parsed questions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this) : groupByPaper && !paperId ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-list\",\n        children: Object.values(groupedQuestions).map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paper-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"paper-group-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"\\uD83D\\uDCC4 \", group.paper_title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"paper-subject\",\n              children: group.subject\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"question-count-badge\",\n              children: [group.questions.length, \" questions\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, this), group.questions.map((q, index) => {\n            const parsedData = q.parsed_data ? JSON.parse(q.parsed_data) : {};\n            let displayNumber = q.question_number;\n            const numberMatch = q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);\n            if (numberMatch) {\n              displayNumber = numberMatch[1];\n            }\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"parsed-question-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-header-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"question-number-badge\",\n                  children: [\"Q\", displayNumber]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"question-meta-tags\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `type-badge ${q.question_type}`,\n                    children: q.question_type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 222,\n                    columnNumber: 27\n                  }, this), q.has_diagram && parsedData.diagram_files && parsedData.diagram_files.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"diagram-badge clickable\",\n                    onClick: () => {\n                      console.log('Diagram badge clicked:', {\n                        paperId: q.paper_id,\n                        filename: parsedData.diagram_files[0]\n                      });\n                      setSelectedDiagram({\n                        paperId: q.paper_id,\n                        filename: parsedData.diagram_files[0]\n                      });\n                    },\n                    children: [\"\\uD83D\\uDCCA Diagram \", parsedData.diagram_files.length > 1 ? `(${parsedData.diagram_files.length})` : '']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 227,\n                    columnNumber: 29\n                  }, this), q.marks && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"marks-badge\",\n                    children: [q.marks, \" marks\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 29\n                  }, this), Object.keys(parsedData).length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"reasoning-btn\",\n                    onClick: () => setSelectedReasoning({\n                      questionNumber: displayNumber,\n                      reasoning: parsedData.reasoning || 'No specific reasoning provided by AI',\n                      llmResponse: JSON.stringify(parsedData, null, 2)\n                    }),\n                    title: \"View AI parsed data\",\n                    children: \"\\uD83E\\uDDE0 AI Data\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 23\n              }, this), (() => {\n                const {\n                  mainQuestion,\n                  mcqOptions,\n                  instructions\n                } = parseQuestionContent(q.question_text);\n                return /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"question-text-display\",\n                    children: [formatQuestionText(mainQuestion), instructions && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"inline-instruction\",\n                      children: [\" [Instruction: \", instructions, \"]\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 266,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 263,\n                    columnNumber: 29\n                  }, this), mcqOptions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mcq-options-display\",\n                    children: mcqOptions.map((option, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mcq-option\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"mcq-option-label\",\n                        children: [\"(\", option.label, \")\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 274,\n                        columnNumber: 37\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"mcq-option-text\",\n                        children: option.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 275,\n                        columnNumber: 37\n                      }, this)]\n                    }, idx, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 273,\n                      columnNumber: 35\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 31\n                  }, this)]\n                }, void 0, true);\n              })(), parsedData.sub_parts && parsedData.sub_parts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sub-parts-display\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Sub-parts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"sub-parts-list\",\n                  children: parsedData.sub_parts.map((part, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"sub-part-item\",\n                    children: part\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 31\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 25\n              }, this), parsedData.diagram_files && parsedData.diagram_files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"diagrams-inline-display\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [\"\\uD83D\\uDCCA Diagram\", parsedData.diagram_files.length > 1 ? 's' : '', \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"diagrams-inline-container\",\n                  children: parsedData.diagram_files.map((filename, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"diagram-inline-wrapper\",\n                    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                      src: `http://localhost:5000/api/diagram/${q.paper_id}/${filename}`,\n                      alt: `Diagram ${idx + 1}`,\n                      className: \"diagram-inline\",\n                      onClick: () => {\n                        console.log('Diagram clicked:', {\n                          paperId: q.paper_id,\n                          filename\n                        });\n                        setSelectedDiagram({\n                          paperId: q.paper_id,\n                          filename\n                        });\n                      },\n                      onError: e => e.target.style.display = 'none'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 301,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"diagram-caption\",\n                      children: \"Click to enlarge\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 311,\n                      columnNumber: 33\n                    }, this)]\n                  }, idx, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 300,\n                    columnNumber: 31\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-footer\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"created-date\",\n                  children: new Date(q.created_at).toLocaleDateString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 23\n              }, this)]\n            }, q.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 21\n            }, this);\n          })]\n        }, group.paper_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-list\",\n        children: [filteredQuestions.map((q, index) => {\n          const parsedData = q.parsed_data ? JSON.parse(q.parsed_data) : {};\n\n          // Extract question number from question_text if it starts with a number\n          let displayNumber = q.question_number;\n          const numberMatch = q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);\n          if (numberMatch) {\n            displayNumber = numberMatch[1];\n          }\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"parsed-question-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-header-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-number-badge\",\n                children: [\"Q\", displayNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-meta-tags\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `type-badge ${q.question_type}`,\n                  children: q.question_type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 23\n                }, this), q.has_diagram && parsedData.diagram_files && parsedData.diagram_files.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"diagram-badge clickable\",\n                  onClick: () => {\n                    console.log('Diagram badge clicked (ungrouped):', {\n                      paperId: q.paper_id,\n                      filename: parsedData.diagram_files[0]\n                    });\n                    setSelectedDiagram({\n                      paperId: q.paper_id,\n                      filename: parsedData.diagram_files[0]\n                    });\n                  },\n                  children: [\"\\uD83D\\uDCCA Diagram \", parsedData.diagram_files.length > 1 ? `(${parsedData.diagram_files.length})` : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 25\n                }, this), q.marks && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"marks-badge\",\n                  children: [q.marks, \" marks\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 25\n                }, this), Object.keys(parsedData).length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"reasoning-btn\",\n                  onClick: () => setSelectedReasoning({\n                    questionNumber: displayNumber,\n                    reasoning: parsedData.reasoning || 'No specific reasoning provided by AI',\n                    llmResponse: JSON.stringify(parsedData, null, 2)\n                  }),\n                  title: \"View AI parsed data\",\n                  children: \"\\uD83E\\uDDE0 AI Data\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 19\n            }, this), (() => {\n              const {\n                mainQuestion,\n                mcqOptions,\n                instructions\n              } = parseQuestionContent(q.question_text);\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"question-text-display\",\n                  children: [formatQuestionText(mainQuestion), instructions && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"inline-instruction\",\n                    children: [\" [Instruction: \", instructions, \"]\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 393,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 25\n                }, this), mcqOptions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mcq-options-display\",\n                  children: mcqOptions.map((option, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mcq-option\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"mcq-option-label\",\n                      children: [\"(\", option.label, \")\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 401,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"mcq-option-text\",\n                      children: option.text\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 402,\n                      columnNumber: 33\n                    }, this)]\n                  }, idx, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 400,\n                    columnNumber: 31\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true);\n            })(), parsedData.sub_parts && parsedData.sub_parts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sub-parts-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Sub-parts:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sub-parts-list\",\n                children: parsedData.sub_parts.map((part, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"sub-part-item\",\n                  children: part\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 27\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 21\n            }, this), parsedData.diagram_files && parsedData.diagram_files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"diagrams-inline-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"\\uD83D\\uDCCA Diagram\", parsedData.diagram_files.length > 1 ? 's' : '', \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"diagrams-inline-container\",\n                children: parsedData.diagram_files.map((filename, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"diagram-inline-wrapper\",\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `http://localhost:5000/api/diagram/${q.paper_id}/${filename}`,\n                    alt: `Diagram ${idx + 1}`,\n                    className: \"diagram-inline\",\n                    onClick: () => {\n                      console.log('Diagram clicked (ungrouped):', {\n                        paperId: q.paper_id,\n                        filename\n                      });\n                      setSelectedDiagram({\n                        paperId: q.paper_id,\n                        filename\n                      });\n                    },\n                    onError: e => e.target.style.display = 'none'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 428,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"diagram-caption\",\n                    children: \"Click to enlarge\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 438,\n                    columnNumber: 29\n                  }, this)]\n                }, idx, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 27\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-footer\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"paper-info\",\n                children: [\"\\uD83D\\uDCC4 \", q.paper_title, \" \\u2022 \", q.subject]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"created-date\",\n                children: new Date(q.created_at).toLocaleDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 19\n            }, this)]\n          }, q.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 17\n          }, this);\n        }), filteredQuestions.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-questions\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No questions found matching your criteria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this), selectedDiagram && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"diagram-modal\",\n        onClick: () => setSelectedDiagram(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"diagram-modal-content\",\n          onClick: e => e.stopPropagation(),\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-diagram-btn\",\n            onClick: () => setSelectedDiagram(null),\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://localhost:5000/api/diagram/${selectedDiagram.paperId}/${selectedDiagram.filename}`,\n            alt: \"Diagram\",\n            className: \"diagram-full\",\n            onLoad: () => console.log('Modal diagram loaded'),\n            onError: e => console.error('Modal diagram failed to load', e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 11\n      }, this), selectedDiagram && console.log('Modal should be visible, selectedDiagram:', selectedDiagram), selectedReasoning && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reasoning-modal\",\n        onClick: () => setSelectedReasoning(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reasoning-modal-content\",\n          onClick: e => e.stopPropagation(),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reasoning-modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"\\uD83E\\uDDE0 AI Parsed Data - Q\", selectedReasoning.questionNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"close-reasoning-btn\",\n              onClick: () => setSelectedReasoning(null),\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reasoning-modal-body\",\n            children: [selectedReasoning.reasoning !== 'No specific reasoning provided by AI' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"reasoning-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83D\\uDCAD AI Reasoning:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"reasoning-content\",\n                children: selectedReasoning.reasoning\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"llm-response-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83E\\uDD16 Parsed Data (JSON):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"llm-response-content\",\n                children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                  children: selectedReasoning.llmResponse\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 504,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(ParsedQuestionsView, \"QiUJSmfCFgsFgLyzbTZe2vXQWoE=\");\n_c = ParsedQuestionsView;\nexport default ParsedQuestionsView;\nvar _c;\n$RefreshReg$(_c, \"ParsedQuestionsView\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ParsedQuestionsView","paperId","onClose","embedded","_s","questions","setQuestions","loading","setLoading","filter","setFilter","searchTerm","setSearchTerm","selectedDiagram","setSelectedDiagram","selectedPaper","setSelectedPaper","groupByPaper","setGroupByPaper","selectedReasoning","setSelectedReasoning","solvingQuestion","setSolvingQuestion","selectedSolution","setSelectedSolution","parseQuestionContent","text","mainQuestion","mcqOptions","instructions","inlineInstructionMatch","match","trim","remainingText","replace","mcqPattern","mcqMatches","matchAll","length","map","label","forEach","formatQuestionText","parts","split","children","part","idx","trimmedPart","isSubPart","test","className","fileName","_jsxFileName","lineNumber","columnNumber","fetchParsedQuestions","url","response","get","data","err","console","error","filteredQuestions","q","matchesFilter","question_type","matchesSearch","question_text","toLowerCase","includes","question_number","matchesPaper","paper_id","parseInt","questionTypes","Set","papers","Map","id","title","paper_title","subject","values","groupedQuestions","key","push","containerClass","innerClass","onClick","type","placeholder","value","onChange","e","target","paper","checked","Object","group","index","parsedData","parsed_data","JSON","parse","displayNumber","numberMatch","has_diagram","diagram_files","log","filename","marks","keys","questionNumber","reasoning","llmResponse","stringify","option","sub_parts","src","alt","onError","style","display","Date","created_at","toLocaleDateString","stopPropagation","onLoad","_c","$RefreshReg$"],"sources":["D:/AI/_Programs/CBSE/aqnamic/frontend/src/components/ParsedQuestionsView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './ParsedQuestionsView.css';\n\nconst ParsedQuestionsView = ({ paperId, onClose, embedded = false }) => {\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDiagram, setSelectedDiagram] = useState(null);\n  const [selectedPaper, setSelectedPaper] = useState(paperId || 'all');\n  const [groupByPaper, setGroupByPaper] = useState(!paperId); // Group by default when viewing all\n  const [selectedReasoning, setSelectedReasoning] = useState(null);\n  const [solvingQuestion, setSolvingQuestion] = useState(false);\n  const [selectedSolution, setSelectedSolution] = useState(null);\n\n  // Parse question text to extract main question, MCQ options, and instructions\n  const parseQuestionContent = (text) => {\n    if (!text) return { mainQuestion: '', mcqOptions: [], instructions: '' };\n    \n    // Extract inline instructions in format: [Instruction: ...]\n    const inlineInstructionMatch = text.match(/\\[Instruction:\\s*([^\\]]+)\\]/i);\n    const instructions = inlineInstructionMatch ? inlineInstructionMatch[1].trim() : '';\n    \n    // Remove inline instruction from text\n    let remainingText = inlineInstructionMatch ? text.replace(inlineInstructionMatch[0], '').trim() : text;\n    \n    // Extract MCQ options: (A), (B), (C), (D) or A), B), C), D)\n    const mcqPattern = /\\(([A-D])\\)\\s*([^\\(\\)]+?)(?=\\([A-D]\\)|$)/gi;\n    const mcqMatches = [...remainingText.matchAll(mcqPattern)];\n    \n    let mcqOptions = [];\n    let mainQuestion = remainingText;\n    \n    if (mcqMatches.length >= 2) {\n      // Extract MCQ options\n      mcqOptions = mcqMatches.map(match => ({\n        label: match[1],\n        text: match[2].trim()\n      }));\n      \n      // Remove MCQ options from main question\n      mcqMatches.forEach(match => {\n        mainQuestion = mainQuestion.replace(match[0], '');\n      });\n      mainQuestion = mainQuestion.trim();\n    }\n    \n    return { mainQuestion, mcqOptions, instructions };\n  };\n  \n  // Format question text to show sub-parts on new lines\n  const formatQuestionText = (text) => {\n    if (!text) return text;\n    \n    // Split by common sub-part patterns: (a), (b), (c) or a), b), c) or (i), (ii), i), ii)\n    // Look ahead to split before these patterns\n    const parts = text.split(/(?=\\n?\\s*\\(?[a-z]\\)\\s)|(?=\\n?\\s*\\(?[ivx]+\\)\\s)/i);\n    \n    return (\n      <div>\n        {parts.map((part, idx) => {\n          const trimmedPart = part.trim();\n          if (!trimmedPart) return null;\n          \n          // Check if this part starts with a sub-number like (a), a), (i), i), etc.\n          const isSubPart = /^\\(?[a-z]\\)|^\\(?[ivx]+\\)/i.test(trimmedPart);\n          \n          return (\n            <div key={idx} className={isSubPart ? 'sub-part-line' : 'main-question-line'}>\n              {trimmedPart}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    fetchParsedQuestions();\n  }, [paperId]);\n\n  const fetchParsedQuestions = async () => {\n    try {\n      const url = paperId \n        ? `http://localhost:5000/api/parsed-questions?paper_id=${paperId}`\n        : 'http://localhost:5000/api/parsed-questions';\n      \n      const response = await axios.get(url);\n      setQuestions(response.data);\n    } catch (err) {\n      console.error('Error fetching parsed questions:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredQuestions = questions.filter(q => {\n    const matchesFilter = filter === 'all' || q.question_type === filter;\n    const matchesSearch = q.question_text.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         q.question_number.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesPaper = selectedPaper === 'all' || q.paper_id === parseInt(selectedPaper);\n    return matchesFilter && matchesSearch && matchesPaper;\n  });\n\n  const questionTypes = [...new Set(questions.map(q => q.question_type))];\n  \n  // Get unique papers\n  const papers = [...new Map(questions.map(q => [q.paper_id, { id: q.paper_id, title: q.paper_title, subject: q.subject }])).values()];\n  \n  // Group questions by paper\n  const groupedQuestions = {};\n  filteredQuestions.forEach(q => {\n    const key = `${q.paper_id}_${q.paper_title}`;\n    if (!groupedQuestions[key]) {\n      groupedQuestions[key] = {\n        paper_id: q.paper_id,\n        paper_title: q.paper_title,\n        subject: q.subject,\n        questions: []\n      };\n    }\n    groupedQuestions[key].questions.push(q);\n  });\n\n  const containerClass = embedded ? \"parsed-questions-embedded\" : \"parsed-questions-modal\";\n  const innerClass = embedded ? \"parsed-questions-content\" : \"parsed-questions-container\";\n\n  return (\n    <div className={containerClass}>\n      <div className={innerClass}>\n        <div className=\"parsed-header\">\n          <div>\n            <h2>📋 All Parsed Questions</h2>\n            <p>{questions.length} questions from {papers.length} paper(s)</p>\n          </div>\n          {!embedded && <button className=\"close-btn\" onClick={onClose}>✕</button>}\n        </div>\n\n        <div className=\"parsed-controls\">\n          <input\n            type=\"text\"\n            placeholder=\"🔍 Search questions...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"search-input\"\n          />\n\n          {!paperId && (\n            <select \n              value={selectedPaper} \n              onChange={(e) => setSelectedPaper(e.target.value)}\n              className=\"filter-select\"\n            >\n              <option value=\"all\">All Papers ({papers.length})</option>\n              {papers.map(paper => (\n                <option key={paper.id} value={paper.id}>\n                  {paper.title} - {paper.subject}\n                </option>\n              ))}\n            </select>\n          )}\n\n          <select \n            value={filter} \n            onChange={(e) => setFilter(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">All Types</option>\n            {questionTypes.map(type => (\n              <option key={type} value={type}>{type}</option>\n            ))}\n          </select>\n\n          {!paperId && !embedded && (\n            <label className=\"group-toggle\">\n              <input\n                type=\"checkbox\"\n                checked={groupByPaper}\n                onChange={(e) => setGroupByPaper(e.target.checked)}\n              />\n              Group by Paper\n            </label>\n          )}\n\n          <div className=\"results-count\">\n            {filteredQuestions.length} of {questions.length} questions\n          </div>\n        </div>\n\n        {loading ? (\n          <div className=\"loading-state\">\n            <div className=\"spinner\"></div>\n            <p>Loading parsed questions...</p>\n          </div>\n        ) : groupByPaper && !paperId ? (\n          <div className=\"questions-list\">\n            {Object.values(groupedQuestions).map((group) => (\n              <div key={group.paper_id} className=\"paper-group\">\n                <div className=\"paper-group-header\">\n                  <h3>📄 {group.paper_title}</h3>\n                  <span className=\"paper-subject\">{group.subject}</span>\n                  <span className=\"question-count-badge\">{group.questions.length} questions</span>\n                </div>\n                {group.questions.map((q, index) => {\n                  const parsedData = q.parsed_data ? JSON.parse(q.parsed_data) : {};\n                  \n                  let displayNumber = q.question_number;\n                  const numberMatch = q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);\n                  if (numberMatch) {\n                    displayNumber = numberMatch[1];\n                  }\n                  \n                  return (\n                    <div key={q.id} className=\"parsed-question-card\">\n                      <div className=\"question-header-row\">\n                        <div className=\"question-number-badge\">\n                          Q{displayNumber}\n                        </div>\n                        \n                        <div className=\"question-meta-tags\">\n                          <span className={`type-badge ${q.question_type}`}>\n                            {q.question_type}\n                          </span>\n                          \n                          {q.has_diagram && parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                            <span \n                              className=\"diagram-badge clickable\"\n                              onClick={() => {\n                                console.log('Diagram badge clicked:', { paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                                setSelectedDiagram({ paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                              }}\n                            >\n                              📊 Diagram {parsedData.diagram_files.length > 1 ? `(${parsedData.diagram_files.length})` : ''}\n                            </span>\n                          )}\n                          \n                          {q.marks && (\n                            <span className=\"marks-badge\">{q.marks} marks</span>\n                          )}\n                          \n                          {Object.keys(parsedData).length > 0 && (\n                            <button \n                              className=\"reasoning-btn\"\n                              onClick={() => setSelectedReasoning({\n                                questionNumber: displayNumber,\n                                reasoning: parsedData.reasoning || 'No specific reasoning provided by AI',\n                                llmResponse: JSON.stringify(parsedData, null, 2)\n                              })}\n                              title=\"View AI parsed data\"\n                            >\n                              🧠 AI Data\n                            </button>\n                          )}\n                        </div>\n                      </div>\n\n                      {(() => {\n                        const { mainQuestion, mcqOptions, instructions } = parseQuestionContent(q.question_text);\n                        \n                        return (\n                          <>\n                            <div className=\"question-text-display\">\n                              {formatQuestionText(mainQuestion)}\n                              {instructions && (\n                                <span className=\"inline-instruction\"> [Instruction: {instructions}]</span>\n                              )}\n                            </div>\n                            \n                            {mcqOptions.length > 0 && (\n                              <div className=\"mcq-options-display\">\n                                {mcqOptions.map((option, idx) => (\n                                  <div key={idx} className=\"mcq-option\">\n                                    <span className=\"mcq-option-label\">({option.label})</span>\n                                    <span className=\"mcq-option-text\">{option.text}</span>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </>\n                        );\n                      })()}\n\n                      {parsedData.sub_parts && parsedData.sub_parts.length > 0 && (\n                        <div className=\"sub-parts-display\">\n                          <strong>Sub-parts:</strong>\n                          <div className=\"sub-parts-list\">\n                            {parsedData.sub_parts.map((part, idx) => (\n                              <div key={idx} className=\"sub-part-item\">{part}</div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                        <div className=\"diagrams-inline-display\">\n                          <strong>📊 Diagram{parsedData.diagram_files.length > 1 ? 's' : ''}:</strong>\n                          <div className=\"diagrams-inline-container\">\n                            {parsedData.diagram_files.map((filename, idx) => (\n                              <div key={idx} className=\"diagram-inline-wrapper\">\n                                <img \n                                  src={`http://localhost:5000/api/diagram/${q.paper_id}/${filename}`}\n                                  alt={`Diagram ${idx + 1}`}\n                                  className=\"diagram-inline\"\n                                  onClick={() => {\n                                    console.log('Diagram clicked:', { paperId: q.paper_id, filename });\n                                    setSelectedDiagram({ paperId: q.paper_id, filename });\n                                  }}\n                                  onError={(e) => e.target.style.display = 'none'}\n                                />\n                                <span className=\"diagram-caption\">Click to enlarge</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      <div className=\"question-footer\">\n                        <span className=\"created-date\">\n                          {new Date(q.created_at).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"questions-list\">\n            {filteredQuestions.map((q, index) => {\n              const parsedData = q.parsed_data ? JSON.parse(q.parsed_data) : {};\n              \n              // Extract question number from question_text if it starts with a number\n              let displayNumber = q.question_number;\n              const numberMatch = q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);\n              if (numberMatch) {\n                displayNumber = numberMatch[1];\n              }\n              \n              return (\n                <div key={q.id} className=\"parsed-question-card\">\n                  <div className=\"question-header-row\">\n                    <div className=\"question-number-badge\">\n                      Q{displayNumber}\n                    </div>\n                    \n                    <div className=\"question-meta-tags\">\n                      <span className={`type-badge ${q.question_type}`}>\n                        {q.question_type}\n                      </span>\n                      \n                      {q.has_diagram && parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                        <span \n                          className=\"diagram-badge clickable\"\n                          onClick={() => {\n                            console.log('Diagram badge clicked (ungrouped):', { paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                            setSelectedDiagram({ paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                          }}\n                        >\n                          📊 Diagram {parsedData.diagram_files.length > 1 ? `(${parsedData.diagram_files.length})` : ''}\n                        </span>\n                      )}\n                      \n                      {q.marks && (\n                        <span className=\"marks-badge\">{q.marks} marks</span>\n                      )}\n                      \n                      {Object.keys(parsedData).length > 0 && (\n                        <button \n                          className=\"reasoning-btn\"\n                          onClick={() => setSelectedReasoning({\n                            questionNumber: displayNumber,\n                            reasoning: parsedData.reasoning || 'No specific reasoning provided by AI',\n                            llmResponse: JSON.stringify(parsedData, null, 2)\n                          })}\n                          title=\"View AI parsed data\"\n                        >\n                          🧠 AI Data\n                        </button>\n                      )}\n                    </div>\n                  </div>\n\n                  {(() => {\n                    const { mainQuestion, mcqOptions, instructions } = parseQuestionContent(q.question_text);\n                    \n                    return (\n                      <>\n                        <div className=\"question-text-display\">\n                          {formatQuestionText(mainQuestion)}\n                          {instructions && (\n                            <span className=\"inline-instruction\"> [Instruction: {instructions}]</span>\n                          )}\n                        </div>\n                        \n                        {mcqOptions.length > 0 && (\n                          <div className=\"mcq-options-display\">\n                            {mcqOptions.map((option, idx) => (\n                              <div key={idx} className=\"mcq-option\">\n                                <span className=\"mcq-option-label\">({option.label})</span>\n                                <span className=\"mcq-option-text\">{option.text}</span>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </>\n                    );\n                  })()}\n\n                  {parsedData.sub_parts && parsedData.sub_parts.length > 0 && (\n                    <div className=\"sub-parts-display\">\n                      <strong>Sub-parts:</strong>\n                      <div className=\"sub-parts-list\">\n                        {parsedData.sub_parts.map((part, idx) => (\n                          <div key={idx} className=\"sub-part-item\">{part}</div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                    <div className=\"diagrams-inline-display\">\n                      <strong>📊 Diagram{parsedData.diagram_files.length > 1 ? 's' : ''}:</strong>\n                      <div className=\"diagrams-inline-container\">\n                        {parsedData.diagram_files.map((filename, idx) => (\n                          <div key={idx} className=\"diagram-inline-wrapper\">\n                            <img \n                              src={`http://localhost:5000/api/diagram/${q.paper_id}/${filename}`}\n                              alt={`Diagram ${idx + 1}`}\n                              className=\"diagram-inline\"\n                              onClick={() => {\n                                console.log('Diagram clicked (ungrouped):', { paperId: q.paper_id, filename });\n                                setSelectedDiagram({ paperId: q.paper_id, filename });\n                              }}\n                              onError={(e) => e.target.style.display = 'none'}\n                            />\n                            <span className=\"diagram-caption\">Click to enlarge</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"question-footer\">\n                    <span className=\"paper-info\">\n                      📄 {q.paper_title} • {q.subject}\n                    </span>\n                    <span className=\"created-date\">\n                      {new Date(q.created_at).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n              );\n            })}\n\n            {filteredQuestions.length === 0 && (\n              <div className=\"no-questions\">\n                <p>No questions found matching your criteria</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Diagram Modal */}\n        {selectedDiagram && (\n          <div className=\"diagram-modal\" onClick={() => setSelectedDiagram(null)}>\n            <div className=\"diagram-modal-content\" onClick={(e) => e.stopPropagation()}>\n              <button className=\"close-diagram-btn\" onClick={() => setSelectedDiagram(null)}>✕</button>\n              <img \n                src={`http://localhost:5000/api/diagram/${selectedDiagram.paperId}/${selectedDiagram.filename}`}\n                alt=\"Diagram\"\n                className=\"diagram-full\"\n                onLoad={() => console.log('Modal diagram loaded')}\n                onError={(e) => console.error('Modal diagram failed to load', e)}\n              />\n            </div>\n          </div>\n        )}\n        {selectedDiagram && console.log('Modal should be visible, selectedDiagram:', selectedDiagram)}\n\n        {/* Reasoning Modal */}\n        {selectedReasoning && (\n          <div className=\"reasoning-modal\" onClick={() => setSelectedReasoning(null)}>\n            <div className=\"reasoning-modal-content\" onClick={(e) => e.stopPropagation()}>\n              <div className=\"reasoning-modal-header\">\n                <h3>🧠 AI Parsed Data - Q{selectedReasoning.questionNumber}</h3>\n                <button className=\"close-reasoning-btn\" onClick={() => setSelectedReasoning(null)}>✕</button>\n              </div>\n              \n              <div className=\"reasoning-modal-body\">\n                {selectedReasoning.reasoning !== 'No specific reasoning provided by AI' && (\n                  <div className=\"reasoning-section\">\n                    <h4>💭 AI Reasoning:</h4>\n                    <div className=\"reasoning-content\">\n                      {selectedReasoning.reasoning}\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"llm-response-section\">\n                  <h4>🤖 Parsed Data (JSON):</h4>\n                  <div className=\"llm-response-content\">\n                    <pre>{selectedReasoning.llmResponse}</pre>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ParsedQuestionsView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}