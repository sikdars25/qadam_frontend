{"ast":null,"code":"import React,{useState}from'react';import Sidebar from'./Sidebar';import SampleQuestions from'./SampleQuestions';import UploadPapers from'./UploadPapers';import ChapterQuestions from'./ChapterQuestions';import QuestionBank from'./QuestionBank';import SingleQuestionUpload from'./SingleQuestionUpload';import'./Dashboard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=_ref=>{let{user,onLogout}=_ref;const[activeMenu,setActiveMenu]=useState('sample-questions');const[showSingleQuestionUpload,setShowSingleQuestionUpload]=useState(false);const renderContent=()=>{switch(activeMenu){case'sample-questions':return/*#__PURE__*/_jsx(SampleQuestions,{});case'upload-papers':return/*#__PURE__*/_jsx(UploadPapers,{user:user});case'chapter-questions':return/*#__PURE__*/_jsx(ChapterQuestions,{});case'question-bank':return/*#__PURE__*/_jsx(QuestionBank,{});default:return/*#__PURE__*/_jsx(SampleQuestions,{});}};const handleQuestionParsed=question=>{console.log('Question parsed:',question);// You can add logic here to save or display the parsed question\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard\",children:[/*#__PURE__*/_jsx(Sidebar,{activeMenu:activeMenu,setActiveMenu:setActiveMenu,user:user,onLogout:onLogout,onUploadSingleQuestion:()=>setShowSingleQuestionUpload(true)}),/*#__PURE__*/_jsx(\"div\",{className:\"dashboard-content\",children:/*#__PURE__*/_jsx(\"div\",{className:\"content-area\",children:renderContent()})}),showSingleQuestionUpload&&/*#__PURE__*/_jsx(SingleQuestionUpload,{onClose:()=>setShowSingleQuestionUpload(false),onQuestionParsed:handleQuestionParsed})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","Sidebar","SampleQuestions","UploadPapers","ChapterQuestions","QuestionBank","SingleQuestionUpload","jsx","_jsx","jsxs","_jsxs","Dashboard","_ref","user","onLogout","activeMenu","setActiveMenu","showSingleQuestionUpload","setShowSingleQuestionUpload","renderContent","handleQuestionParsed","question","console","log","className","children","onUploadSingleQuestion","onClose","onQuestionParsed"],"sources":["D:/AI/_Programs/CBSE/aqnamic/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Sidebar from './Sidebar';\nimport SampleQuestions from './SampleQuestions';\nimport UploadPapers from './UploadPapers';\nimport ChapterQuestions from './ChapterQuestions';\nimport QuestionBank from './QuestionBank';\nimport SingleQuestionUpload from './SingleQuestionUpload';\nimport './Dashboard.css';\n\nconst Dashboard = ({ user, onLogout }) => {\n  const [activeMenu, setActiveMenu] = useState('sample-questions');\n  const [showSingleQuestionUpload, setShowSingleQuestionUpload] = useState(false);\n\n  const renderContent = () => {\n    switch (activeMenu) {\n      case 'sample-questions':\n        return <SampleQuestions />;\n      case 'upload-papers':\n        return <UploadPapers user={user} />;\n      case 'chapter-questions':\n        return <ChapterQuestions />;\n      case 'question-bank':\n        return <QuestionBank />;\n      default:\n        return <SampleQuestions />;\n    }\n  };\n\n  const handleQuestionParsed = (question) => {\n    console.log('Question parsed:', question);\n    // You can add logic here to save or display the parsed question\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <Sidebar \n        activeMenu={activeMenu} \n        setActiveMenu={setActiveMenu}\n        user={user}\n        onLogout={onLogout}\n        onUploadSingleQuestion={() => setShowSingleQuestionUpload(true)}\n      />\n      <div className=\"dashboard-content\">\n        <div className=\"content-area\">\n          {renderContent()}\n        </div>\n      </div>\n\n      {showSingleQuestionUpload && (\n        <SingleQuestionUpload\n          onClose={() => setShowSingleQuestionUpload(false)}\n          onQuestionParsed={handleQuestionParsed}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,OAAO,KAAM,WAAW,CAC/B,MAAO,CAAAC,eAAe,KAAM,mBAAmB,CAC/C,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,gBAAgB,KAAM,oBAAoB,CACjD,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,oBAAoB,KAAM,wBAAwB,CACzD,MAAO,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEzB,KAAM,CAAAC,SAAS,CAAGC,IAAA,EAAwB,IAAvB,CAAEC,IAAI,CAAEC,QAAS,CAAC,CAAAF,IAAA,CACnC,KAAM,CAACG,UAAU,CAAEC,aAAa,CAAC,CAAGhB,QAAQ,CAAC,kBAAkB,CAAC,CAChE,KAAM,CAACiB,wBAAwB,CAAEC,2BAA2B,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CAE/E,KAAM,CAAAmB,aAAa,CAAGA,CAAA,GAAM,CAC1B,OAAQJ,UAAU,EAChB,IAAK,kBAAkB,CACrB,mBAAOP,IAAA,CAACN,eAAe,GAAE,CAAC,CAC5B,IAAK,eAAe,CAClB,mBAAOM,IAAA,CAACL,YAAY,EAACU,IAAI,CAAEA,IAAK,CAAE,CAAC,CACrC,IAAK,mBAAmB,CACtB,mBAAOL,IAAA,CAACJ,gBAAgB,GAAE,CAAC,CAC7B,IAAK,eAAe,CAClB,mBAAOI,IAAA,CAACH,YAAY,GAAE,CAAC,CACzB,QACE,mBAAOG,IAAA,CAACN,eAAe,GAAE,CAAC,CAC9B,CACF,CAAC,CAED,KAAM,CAAAkB,oBAAoB,CAAIC,QAAQ,EAAK,CACzCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEF,QAAQ,CAAC,CACzC;AACF,CAAC,CAED,mBACEX,KAAA,QAAKc,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxBjB,IAAA,CAACP,OAAO,EACNc,UAAU,CAAEA,UAAW,CACvBC,aAAa,CAAEA,aAAc,CAC7BH,IAAI,CAAEA,IAAK,CACXC,QAAQ,CAAEA,QAAS,CACnBY,sBAAsB,CAAEA,CAAA,GAAMR,2BAA2B,CAAC,IAAI,CAAE,CACjE,CAAC,cACFV,IAAA,QAAKgB,SAAS,CAAC,mBAAmB,CAAAC,QAAA,cAChCjB,IAAA,QAAKgB,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC1BN,aAAa,CAAC,CAAC,CACb,CAAC,CACH,CAAC,CAELF,wBAAwB,eACvBT,IAAA,CAACF,oBAAoB,EACnBqB,OAAO,CAAEA,CAAA,GAAMT,2BAA2B,CAAC,KAAK,CAAE,CAClDU,gBAAgB,CAAER,oBAAqB,CACxC,CACF,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAT,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}