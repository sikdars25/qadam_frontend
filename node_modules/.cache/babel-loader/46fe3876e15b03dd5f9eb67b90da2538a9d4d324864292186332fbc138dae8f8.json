{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI\\\\_Programs\\\\CBSE\\\\aqnamic\\\\frontend\\\\src\\\\components\\\\ParsedQuestionsView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './ParsedQuestionsView.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ParsedQuestionsView = ({\n  paperId,\n  onClose,\n  embedded = false\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDiagram, setSelectedDiagram] = useState(null);\n  const [selectedPaper, setSelectedPaper] = useState(paperId || 'all');\n  const [groupByPaper, setGroupByPaper] = useState(!paperId); // Group by default when viewing all\n  const [selectedReasoning, setSelectedReasoning] = useState(null);\n  const [solvingQuestion, setSolvingQuestion] = useState(false);\n  const [selectedSolution, setSelectedSolution] = useState(null);\n\n  // Parse question text to extract main question, MCQ options, and instructions\n  const parseQuestionContent = text => {\n    if (!text) return {\n      mainQuestion: '',\n      mcqOptions: [],\n      instructions: ''\n    };\n\n    // Extract inline instructions in format: [Instruction: ...]\n    const inlineInstructionMatch = text.match(/\\[Instruction:\\s*([^\\]]+)\\]/i);\n    const instructions = inlineInstructionMatch ? inlineInstructionMatch[1].trim() : '';\n\n    // Remove inline instruction from text\n    let remainingText = inlineInstructionMatch ? text.replace(inlineInstructionMatch[0], '').trim() : text;\n\n    // Extract MCQ options: (A), (B), (C), (D) or A), B), C), D)\n    const mcqPattern = /\\(([A-D])\\)\\s*([^\\(\\)]+?)(?=\\([A-D]\\)|$)/gi;\n    const mcqMatches = [...remainingText.matchAll(mcqPattern)];\n    let mcqOptions = [];\n    let mainQuestion = remainingText;\n    if (mcqMatches.length >= 2) {\n      // Extract MCQ options\n      mcqOptions = mcqMatches.map(match => ({\n        label: match[1],\n        text: match[2].trim()\n      }));\n\n      // Remove MCQ options from main question\n      mcqMatches.forEach(match => {\n        mainQuestion = mainQuestion.replace(match[0], '');\n      });\n      mainQuestion = mainQuestion.trim();\n    }\n    return {\n      mainQuestion,\n      mcqOptions,\n      instructions\n    };\n  };\n\n  // Format question text to show sub-parts on new lines\n  const formatQuestionText = text => {\n    if (!text) return text;\n\n    // Split by common sub-part patterns: (a), (b), (c) or a), b), c) or (i), (ii), i), ii)\n    // Look ahead to split before these patterns\n    const parts = text.split(/(?=\\n?\\s*\\(?[a-z]\\)\\s)|(?=\\n?\\s*\\(?[ivx]+\\)\\s)/i);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: parts.map((part, idx) => {\n        const trimmedPart = part.trim();\n        if (!trimmedPart) return null;\n\n        // Check if this part starts with a sub-number like (a), a), (i), i), etc.\n        const isSubPart = /^\\(?[a-z]\\)|^\\(?[ivx]+\\)/i.test(trimmedPart);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: isSubPart ? 'sub-part-line' : 'main-question-line',\n          children: trimmedPart\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  };\n  useEffect(() => {\n    fetchParsedQuestions();\n  }, [paperId]);\n  const fetchParsedQuestions = async () => {\n    try {\n      const url = paperId ? `http://localhost:5000/api/parsed-questions?paper_id=${paperId}` : 'http://localhost:5000/api/parsed-questions';\n      const response = await axios.get(url);\n      setQuestions(response.data);\n    } catch (err) {\n      console.error('Error fetching parsed questions:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSolveQuestion = async question => {\n    setSolvingQuestion(true);\n    try {\n      const response = await axios.post('http://localhost:5000/api/solve-question', {\n        question_text: question.question_text,\n        question_type: question.question_type,\n        subject: question.subject,\n        chapter_context: null\n      });\n      if (response.data.success) {\n        setSelectedSolution({\n          questionNumber: question.question_number,\n          questionText: question.question_text,\n          questionType: question.question_type,\n          solution: response.data.solution,\n          parsedSolution: response.data.parsed_solution\n        });\n\n        // Save to Question Bank\n        try {\n          await axios.post('http://localhost:5000/api/save-solved-question', {\n            question_text: question.question_text,\n            solution: response.data.solution,\n            source: 'all_questions',\n            paper_id: question.paper_id,\n            textbook_id: null,\n            chapter_name: null,\n            timestamp: new Date().toISOString()\n          });\n          console.log('✅ Question saved to Question Bank');\n        } catch (saveErr) {\n          console.error('Failed to save to Question Bank:', saveErr);\n        }\n      } else {\n        alert('Failed to solve question: ' + (response.data.error || 'Unknown error'));\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error solving question:', error);\n      alert('Error solving question: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message));\n    } finally {\n      setSolvingQuestion(false);\n    }\n  };\n  const filteredQuestions = questions.filter(q => {\n    const matchesFilter = filter === 'all' || q.question_type === filter;\n    const matchesSearch = q.question_text.toLowerCase().includes(searchTerm.toLowerCase()) || q.question_number.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesPaper = selectedPaper === 'all' || q.paper_id === parseInt(selectedPaper);\n    return matchesFilter && matchesSearch && matchesPaper;\n  });\n  const questionTypes = [...new Set(questions.map(q => q.question_type))];\n\n  // Get unique papers\n  const papers = [...new Map(questions.map(q => [q.paper_id, {\n    id: q.paper_id,\n    title: q.paper_title,\n    subject: q.subject\n  }])).values()];\n\n  // Group questions by paper\n  const groupedQuestions = {};\n  filteredQuestions.forEach(q => {\n    const key = `${q.paper_id}_${q.paper_title}`;\n    if (!groupedQuestions[key]) {\n      groupedQuestions[key] = {\n        paper_id: q.paper_id,\n        paper_title: q.paper_title,\n        subject: q.subject,\n        questions: []\n      };\n    }\n    groupedQuestions[key].questions.push(q);\n  });\n  const containerClass = embedded ? \"parsed-questions-embedded\" : \"parsed-questions-modal\";\n  const innerClass = embedded ? \"parsed-questions-content\" : \"parsed-questions-container\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: containerClass,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: innerClass,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parsed-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\uD83D\\uDCCB All Parsed Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [questions.length, \" questions from \", papers.length, \" paper(s)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), !embedded && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: onClose,\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parsed-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\uD83D\\uDD0D Search questions...\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value),\n          className: \"search-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), !paperId && /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedPaper,\n          onChange: e => setSelectedPaper(e.target.value),\n          className: \"filter-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: [\"All Papers (\", papers.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), papers.map(paper => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: paper.id,\n            children: [paper.title, \" - \", paper.subject]\n          }, paper.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filter,\n          onChange: e => setFilter(e.target.value),\n          className: \"filter-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"All Types\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), questionTypes.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: type,\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), !paperId && !embedded && /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"group-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: groupByPaper,\n            onChange: e => setGroupByPaper(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), \"Group by Paper\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-count\",\n          children: [filteredQuestions.length, \" of \", questions.length, \" questions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading parsed questions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this) : groupByPaper && !paperId ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-list\",\n        children: Object.values(groupedQuestions).map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paper-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"paper-group-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"\\uD83D\\uDCC4 \", group.paper_title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"paper-subject\",\n              children: group.subject\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"question-count-badge\",\n              children: [group.questions.length, \" questions\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 17\n          }, this), group.questions.map((q, index) => {\n            const parsedData = q.parsed_data ? JSON.parse(q.parsed_data) : {};\n            let displayNumber = q.question_number;\n            const numberMatch = q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);\n            if (numberMatch) {\n              displayNumber = numberMatch[1];\n            }\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"parsed-question-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-header-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"question-number-badge\",\n                  children: [\"Q\", displayNumber]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"question-meta-tags\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `type-badge ${q.question_type}`,\n                    children: q.question_type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 27\n                  }, this), q.has_diagram && parsedData.diagram_files && parsedData.diagram_files.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"diagram-badge clickable\",\n                    onClick: () => {\n                      console.log('Diagram badge clicked:', {\n                        paperId: q.paper_id,\n                        filename: parsedData.diagram_files[0]\n                      });\n                      setSelectedDiagram({\n                        paperId: q.paper_id,\n                        filename: parsedData.diagram_files[0]\n                      });\n                    },\n                    children: [\"\\uD83D\\uDCCA Diagram \", parsedData.diagram_files.length > 1 ? `(${parsedData.diagram_files.length})` : '']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 29\n                  }, this), q.marks && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"marks-badge\",\n                    children: [q.marks, \" marks\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"solve-btn\",\n                    onClick: () => handleSolveQuestion(q),\n                    disabled: solvingQuestion,\n                    title: \"Get detailed step-by-step solution\",\n                    children: solvingQuestion ? '⏳ Solving...' : '✨ Solve Question'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 287,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 23\n              }, this), (() => {\n                const {\n                  mainQuestion,\n                  mcqOptions,\n                  instructions\n                } = parseQuestionContent(q.question_text);\n                return /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"question-text-display\",\n                    children: [formatQuestionText(mainQuestion), instructions && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"inline-instruction\",\n                      children: [\" [Instruction: \", instructions, \"]\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 306,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 29\n                  }, this), mcqOptions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mcq-options-display\",\n                    children: mcqOptions.map((option, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mcq-option\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"mcq-option-label\",\n                        children: [\"(\", option.label, \")\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 314,\n                        columnNumber: 37\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"mcq-option-text\",\n                        children: option.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 315,\n                        columnNumber: 37\n                      }, this)]\n                    }, idx, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 313,\n                      columnNumber: 35\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 31\n                  }, this)]\n                }, void 0, true);\n              })(), parsedData.sub_parts && parsedData.sub_parts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sub-parts-display\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Sub-parts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"sub-parts-list\",\n                  children: parsedData.sub_parts.map((part, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"sub-part-item\",\n                    children: part\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 329,\n                    columnNumber: 31\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 25\n              }, this), parsedData.diagram_files && parsedData.diagram_files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"diagrams-inline-display\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [\"\\uD83D\\uDCCA Diagram\", parsedData.diagram_files.length > 1 ? 's' : '', \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"diagrams-inline-container\",\n                  children: parsedData.diagram_files.map((filename, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"diagram-inline-wrapper\",\n                    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                      src: `http://localhost:5000/api/diagram/${q.paper_id}/${filename}`,\n                      alt: `Diagram ${idx + 1}`,\n                      className: \"diagram-inline\",\n                      onClick: () => {\n                        console.log('Diagram clicked:', {\n                          paperId: q.paper_id,\n                          filename\n                        });\n                        setSelectedDiagram({\n                          paperId: q.paper_id,\n                          filename\n                        });\n                      },\n                      onError: e => e.target.style.display = 'none'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 341,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"diagram-caption\",\n                      children: \"Click to enlarge\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 351,\n                      columnNumber: 33\n                    }, this)]\n                  }, idx, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 31\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-footer\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"created-date\",\n                  children: new Date(q.created_at).toLocaleDateString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 23\n              }, this)]\n            }, q.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 21\n            }, this);\n          })]\n        }, group.paper_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-list\",\n        children: [filteredQuestions.map((q, index) => {\n          const parsedData = q.parsed_data ? JSON.parse(q.parsed_data) : {};\n\n          // Extract question number from question_text if it starts with a number\n          let displayNumber = q.question_number;\n          const numberMatch = q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);\n          if (numberMatch) {\n            displayNumber = numberMatch[1];\n          }\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"parsed-question-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-header-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-number-badge\",\n                children: [\"Q\", displayNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-meta-tags\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `type-badge ${q.question_type}`,\n                  children: q.question_type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 23\n                }, this), q.has_diagram && parsedData.diagram_files && parsedData.diagram_files.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"diagram-badge clickable\",\n                  onClick: () => {\n                    console.log('Diagram badge clicked (ungrouped):', {\n                      paperId: q.paper_id,\n                      filename: parsedData.diagram_files[0]\n                    });\n                    setSelectedDiagram({\n                      paperId: q.paper_id,\n                      filename: parsedData.diagram_files[0]\n                    });\n                  },\n                  children: [\"\\uD83D\\uDCCA Diagram \", parsedData.diagram_files.length > 1 ? `(${parsedData.diagram_files.length})` : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 25\n                }, this), q.marks && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"marks-badge\",\n                  children: [q.marks, \" marks\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"solve-btn\",\n                  onClick: () => handleSolveQuestion(q),\n                  disabled: solvingQuestion,\n                  title: \"Get detailed step-by-step solution\",\n                  children: solvingQuestion ? '⏳ Solving...' : '✨ Solve Question'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 19\n            }, this), (() => {\n              const {\n                mainQuestion,\n                mcqOptions,\n                instructions\n              } = parseQuestionContent(q.question_text);\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"question-text-display\",\n                  children: [formatQuestionText(mainQuestion), instructions && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"inline-instruction\",\n                    children: [\" [Instruction: \", instructions, \"]\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 428,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 25\n                }, this), mcqOptions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mcq-options-display\",\n                  children: mcqOptions.map((option, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mcq-option\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"mcq-option-label\",\n                      children: [\"(\", option.label, \")\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 436,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"mcq-option-text\",\n                      children: option.text\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 437,\n                      columnNumber: 33\n                    }, this)]\n                  }, idx, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 435,\n                    columnNumber: 31\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true);\n            })(), parsedData.sub_parts && parsedData.sub_parts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sub-parts-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Sub-parts:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sub-parts-list\",\n                children: parsedData.sub_parts.map((part, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"sub-part-item\",\n                  children: part\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 27\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 21\n            }, this), parsedData.diagram_files && parsedData.diagram_files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"diagrams-inline-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"\\uD83D\\uDCCA Diagram\", parsedData.diagram_files.length > 1 ? 's' : '', \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"diagrams-inline-container\",\n                children: parsedData.diagram_files.map((filename, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"diagram-inline-wrapper\",\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `http://localhost:5000/api/diagram/${q.paper_id}/${filename}`,\n                    alt: `Diagram ${idx + 1}`,\n                    className: \"diagram-inline\",\n                    onClick: () => {\n                      console.log('Diagram clicked (ungrouped):', {\n                        paperId: q.paper_id,\n                        filename\n                      });\n                      setSelectedDiagram({\n                        paperId: q.paper_id,\n                        filename\n                      });\n                    },\n                    onError: e => e.target.style.display = 'none'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 463,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"diagram-caption\",\n                    children: \"Click to enlarge\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 473,\n                    columnNumber: 29\n                  }, this)]\n                }, idx, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 462,\n                  columnNumber: 27\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-footer\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"paper-info\",\n                children: [\"\\uD83D\\uDCC4 \", q.paper_title, \" \\u2022 \", q.subject]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"created-date\",\n                children: new Date(q.created_at).toLocaleDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 19\n            }, this)]\n          }, q.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 17\n          }, this);\n        }), filteredQuestions.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-questions\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No questions found matching your criteria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this), selectedDiagram && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"diagram-modal\",\n        onClick: () => setSelectedDiagram(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"diagram-modal-content\",\n          onClick: e => e.stopPropagation(),\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-diagram-btn\",\n            onClick: () => setSelectedDiagram(null),\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://localhost:5000/api/diagram/${selectedDiagram.paperId}/${selectedDiagram.filename}`,\n            alt: \"Diagram\",\n            className: \"diagram-full\",\n            onLoad: () => console.log('Modal diagram loaded'),\n            onError: e => console.error('Modal diagram failed to load', e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this), selectedDiagram && console.log('Modal should be visible, selectedDiagram:', selectedDiagram), selectedSolution && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"solution-modal\",\n        onClick: () => setSelectedSolution(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"solution-modal-content\",\n          onClick: e => e.stopPropagation(),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"solution-modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"\\u2728 Step-by-Step Solution - Q\", selectedSolution.questionNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"solution-type-badge\",\n                children: selectedSolution.questionType\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 524,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"close-solution-btn\",\n              onClick: () => setSelectedSolution(null),\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"solution-modal-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"solution-question-box\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83D\\uDCDD Question:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: selectedSolution.questionText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"solution-content\",\n              children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                style: {\n                  whiteSpace: 'pre-wrap',\n                  fontFamily: 'inherit'\n                },\n                children: selectedSolution.solution\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(ParsedQuestionsView, \"QiUJSmfCFgsFgLyzbTZe2vXQWoE=\");\n_c = ParsedQuestionsView;\nexport default ParsedQuestionsView;\nvar _c;\n$RefreshReg$(_c, \"ParsedQuestionsView\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ParsedQuestionsView","paperId","onClose","embedded","_s","questions","setQuestions","loading","setLoading","filter","setFilter","searchTerm","setSearchTerm","selectedDiagram","setSelectedDiagram","selectedPaper","setSelectedPaper","groupByPaper","setGroupByPaper","selectedReasoning","setSelectedReasoning","solvingQuestion","setSolvingQuestion","selectedSolution","setSelectedSolution","parseQuestionContent","text","mainQuestion","mcqOptions","instructions","inlineInstructionMatch","match","trim","remainingText","replace","mcqPattern","mcqMatches","matchAll","length","map","label","forEach","formatQuestionText","parts","split","children","part","idx","trimmedPart","isSubPart","test","className","fileName","_jsxFileName","lineNumber","columnNumber","fetchParsedQuestions","url","response","get","data","err","console","error","handleSolveQuestion","question","post","question_text","question_type","subject","chapter_context","success","questionNumber","question_number","questionText","questionType","solution","parsedSolution","parsed_solution","source","paper_id","textbook_id","chapter_name","timestamp","Date","toISOString","log","saveErr","alert","_error$response","_error$response$data","message","filteredQuestions","q","matchesFilter","matchesSearch","toLowerCase","includes","matchesPaper","parseInt","questionTypes","Set","papers","Map","id","title","paper_title","values","groupedQuestions","key","push","containerClass","innerClass","onClick","type","placeholder","value","onChange","e","target","paper","checked","Object","group","index","parsedData","parsed_data","JSON","parse","displayNumber","numberMatch","has_diagram","diagram_files","filename","marks","disabled","option","sub_parts","src","alt","onError","style","display","created_at","toLocaleDateString","stopPropagation","onLoad","whiteSpace","fontFamily","_c","$RefreshReg$"],"sources":["D:/AI/_Programs/CBSE/aqnamic/frontend/src/components/ParsedQuestionsView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './ParsedQuestionsView.css';\n\nconst ParsedQuestionsView = ({ paperId, onClose, embedded = false }) => {\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDiagram, setSelectedDiagram] = useState(null);\n  const [selectedPaper, setSelectedPaper] = useState(paperId || 'all');\n  const [groupByPaper, setGroupByPaper] = useState(!paperId); // Group by default when viewing all\n  const [selectedReasoning, setSelectedReasoning] = useState(null);\n  const [solvingQuestion, setSolvingQuestion] = useState(false);\n  const [selectedSolution, setSelectedSolution] = useState(null);\n\n  // Parse question text to extract main question, MCQ options, and instructions\n  const parseQuestionContent = (text) => {\n    if (!text) return { mainQuestion: '', mcqOptions: [], instructions: '' };\n    \n    // Extract inline instructions in format: [Instruction: ...]\n    const inlineInstructionMatch = text.match(/\\[Instruction:\\s*([^\\]]+)\\]/i);\n    const instructions = inlineInstructionMatch ? inlineInstructionMatch[1].trim() : '';\n    \n    // Remove inline instruction from text\n    let remainingText = inlineInstructionMatch ? text.replace(inlineInstructionMatch[0], '').trim() : text;\n    \n    // Extract MCQ options: (A), (B), (C), (D) or A), B), C), D)\n    const mcqPattern = /\\(([A-D])\\)\\s*([^\\(\\)]+?)(?=\\([A-D]\\)|$)/gi;\n    const mcqMatches = [...remainingText.matchAll(mcqPattern)];\n    \n    let mcqOptions = [];\n    let mainQuestion = remainingText;\n    \n    if (mcqMatches.length >= 2) {\n      // Extract MCQ options\n      mcqOptions = mcqMatches.map(match => ({\n        label: match[1],\n        text: match[2].trim()\n      }));\n      \n      // Remove MCQ options from main question\n      mcqMatches.forEach(match => {\n        mainQuestion = mainQuestion.replace(match[0], '');\n      });\n      mainQuestion = mainQuestion.trim();\n    }\n    \n    return { mainQuestion, mcqOptions, instructions };\n  };\n  \n  // Format question text to show sub-parts on new lines\n  const formatQuestionText = (text) => {\n    if (!text) return text;\n    \n    // Split by common sub-part patterns: (a), (b), (c) or a), b), c) or (i), (ii), i), ii)\n    // Look ahead to split before these patterns\n    const parts = text.split(/(?=\\n?\\s*\\(?[a-z]\\)\\s)|(?=\\n?\\s*\\(?[ivx]+\\)\\s)/i);\n    \n    return (\n      <div>\n        {parts.map((part, idx) => {\n          const trimmedPart = part.trim();\n          if (!trimmedPart) return null;\n          \n          // Check if this part starts with a sub-number like (a), a), (i), i), etc.\n          const isSubPart = /^\\(?[a-z]\\)|^\\(?[ivx]+\\)/i.test(trimmedPart);\n          \n          return (\n            <div key={idx} className={isSubPart ? 'sub-part-line' : 'main-question-line'}>\n              {trimmedPart}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    fetchParsedQuestions();\n  }, [paperId]);\n\n  const fetchParsedQuestions = async () => {\n    try {\n      const url = paperId \n        ? `http://localhost:5000/api/parsed-questions?paper_id=${paperId}`\n        : 'http://localhost:5000/api/parsed-questions';\n      \n      const response = await axios.get(url);\n      setQuestions(response.data);\n    } catch (err) {\n      console.error('Error fetching parsed questions:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSolveQuestion = async (question) => {\n    setSolvingQuestion(true);\n    try {\n      const response = await axios.post('http://localhost:5000/api/solve-question', {\n        question_text: question.question_text,\n        question_type: question.question_type,\n        subject: question.subject,\n        chapter_context: null\n      });\n      \n      if (response.data.success) {\n        setSelectedSolution({\n          questionNumber: question.question_number,\n          questionText: question.question_text,\n          questionType: question.question_type,\n          solution: response.data.solution,\n          parsedSolution: response.data.parsed_solution\n        });\n        \n        // Save to Question Bank\n        try {\n          await axios.post('http://localhost:5000/api/save-solved-question', {\n            question_text: question.question_text,\n            solution: response.data.solution,\n            source: 'all_questions',\n            paper_id: question.paper_id,\n            textbook_id: null,\n            chapter_name: null,\n            timestamp: new Date().toISOString()\n          });\n          console.log('✅ Question saved to Question Bank');\n        } catch (saveErr) {\n          console.error('Failed to save to Question Bank:', saveErr);\n        }\n      } else {\n        alert('Failed to solve question: ' + (response.data.error || 'Unknown error'));\n      }\n    } catch (error) {\n      console.error('Error solving question:', error);\n      alert('Error solving question: ' + (error.response?.data?.error || error.message));\n    } finally {\n      setSolvingQuestion(false);\n    }\n  };\n\n  const filteredQuestions = questions.filter(q => {\n    const matchesFilter = filter === 'all' || q.question_type === filter;\n    const matchesSearch = q.question_text.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         q.question_number.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesPaper = selectedPaper === 'all' || q.paper_id === parseInt(selectedPaper);\n    return matchesFilter && matchesSearch && matchesPaper;\n  });\n\n  const questionTypes = [...new Set(questions.map(q => q.question_type))];\n  \n  // Get unique papers\n  const papers = [...new Map(questions.map(q => [q.paper_id, { id: q.paper_id, title: q.paper_title, subject: q.subject }])).values()];\n  \n  // Group questions by paper\n  const groupedQuestions = {};\n  filteredQuestions.forEach(q => {\n    const key = `${q.paper_id}_${q.paper_title}`;\n    if (!groupedQuestions[key]) {\n      groupedQuestions[key] = {\n        paper_id: q.paper_id,\n        paper_title: q.paper_title,\n        subject: q.subject,\n        questions: []\n      };\n    }\n    groupedQuestions[key].questions.push(q);\n  });\n\n  const containerClass = embedded ? \"parsed-questions-embedded\" : \"parsed-questions-modal\";\n  const innerClass = embedded ? \"parsed-questions-content\" : \"parsed-questions-container\";\n\n  return (\n    <div className={containerClass}>\n      <div className={innerClass}>\n        <div className=\"parsed-header\">\n          <div>\n            <h2>📋 All Parsed Questions</h2>\n            <p>{questions.length} questions from {papers.length} paper(s)</p>\n          </div>\n          {!embedded && <button className=\"close-btn\" onClick={onClose}>✕</button>}\n        </div>\n\n        <div className=\"parsed-controls\">\n          <input\n            type=\"text\"\n            placeholder=\"🔍 Search questions...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"search-input\"\n          />\n\n          {!paperId && (\n            <select \n              value={selectedPaper} \n              onChange={(e) => setSelectedPaper(e.target.value)}\n              className=\"filter-select\"\n            >\n              <option value=\"all\">All Papers ({papers.length})</option>\n              {papers.map(paper => (\n                <option key={paper.id} value={paper.id}>\n                  {paper.title} - {paper.subject}\n                </option>\n              ))}\n            </select>\n          )}\n\n          <select \n            value={filter} \n            onChange={(e) => setFilter(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">All Types</option>\n            {questionTypes.map(type => (\n              <option key={type} value={type}>{type}</option>\n            ))}\n          </select>\n\n          {!paperId && !embedded && (\n            <label className=\"group-toggle\">\n              <input\n                type=\"checkbox\"\n                checked={groupByPaper}\n                onChange={(e) => setGroupByPaper(e.target.checked)}\n              />\n              Group by Paper\n            </label>\n          )}\n\n          <div className=\"results-count\">\n            {filteredQuestions.length} of {questions.length} questions\n          </div>\n        </div>\n\n        {loading ? (\n          <div className=\"loading-state\">\n            <div className=\"spinner\"></div>\n            <p>Loading parsed questions...</p>\n          </div>\n        ) : groupByPaper && !paperId ? (\n          <div className=\"questions-list\">\n            {Object.values(groupedQuestions).map((group) => (\n              <div key={group.paper_id} className=\"paper-group\">\n                <div className=\"paper-group-header\">\n                  <h3>📄 {group.paper_title}</h3>\n                  <span className=\"paper-subject\">{group.subject}</span>\n                  <span className=\"question-count-badge\">{group.questions.length} questions</span>\n                </div>\n                {group.questions.map((q, index) => {\n                  const parsedData = q.parsed_data ? JSON.parse(q.parsed_data) : {};\n                  \n                  let displayNumber = q.question_number;\n                  const numberMatch = q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);\n                  if (numberMatch) {\n                    displayNumber = numberMatch[1];\n                  }\n                  \n                  return (\n                    <div key={q.id} className=\"parsed-question-card\">\n                      <div className=\"question-header-row\">\n                        <div className=\"question-number-badge\">\n                          Q{displayNumber}\n                        </div>\n                        \n                        <div className=\"question-meta-tags\">\n                          <span className={`type-badge ${q.question_type}`}>\n                            {q.question_type}\n                          </span>\n                          \n                          {q.has_diagram && parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                            <span \n                              className=\"diagram-badge clickable\"\n                              onClick={() => {\n                                console.log('Diagram badge clicked:', { paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                                setSelectedDiagram({ paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                              }}\n                            >\n                              📊 Diagram {parsedData.diagram_files.length > 1 ? `(${parsedData.diagram_files.length})` : ''}\n                            </span>\n                          )}\n                          \n                          {q.marks && (\n                            <span className=\"marks-badge\">{q.marks} marks</span>\n                          )}\n                          \n                          <button \n                            className=\"solve-btn\"\n                            onClick={() => handleSolveQuestion(q)}\n                            disabled={solvingQuestion}\n                            title=\"Get detailed step-by-step solution\"\n                          >\n                            {solvingQuestion ? '⏳ Solving...' : '✨ Solve Question'}\n                          </button>\n                        </div>\n                      </div>\n\n                      {(() => {\n                        const { mainQuestion, mcqOptions, instructions } = parseQuestionContent(q.question_text);\n                        \n                        return (\n                          <>\n                            <div className=\"question-text-display\">\n                              {formatQuestionText(mainQuestion)}\n                              {instructions && (\n                                <span className=\"inline-instruction\"> [Instruction: {instructions}]</span>\n                              )}\n                            </div>\n                            \n                            {mcqOptions.length > 0 && (\n                              <div className=\"mcq-options-display\">\n                                {mcqOptions.map((option, idx) => (\n                                  <div key={idx} className=\"mcq-option\">\n                                    <span className=\"mcq-option-label\">({option.label})</span>\n                                    <span className=\"mcq-option-text\">{option.text}</span>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </>\n                        );\n                      })()}\n\n                      {parsedData.sub_parts && parsedData.sub_parts.length > 0 && (\n                        <div className=\"sub-parts-display\">\n                          <strong>Sub-parts:</strong>\n                          <div className=\"sub-parts-list\">\n                            {parsedData.sub_parts.map((part, idx) => (\n                              <div key={idx} className=\"sub-part-item\">{part}</div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                        <div className=\"diagrams-inline-display\">\n                          <strong>📊 Diagram{parsedData.diagram_files.length > 1 ? 's' : ''}:</strong>\n                          <div className=\"diagrams-inline-container\">\n                            {parsedData.diagram_files.map((filename, idx) => (\n                              <div key={idx} className=\"diagram-inline-wrapper\">\n                                <img \n                                  src={`http://localhost:5000/api/diagram/${q.paper_id}/${filename}`}\n                                  alt={`Diagram ${idx + 1}`}\n                                  className=\"diagram-inline\"\n                                  onClick={() => {\n                                    console.log('Diagram clicked:', { paperId: q.paper_id, filename });\n                                    setSelectedDiagram({ paperId: q.paper_id, filename });\n                                  }}\n                                  onError={(e) => e.target.style.display = 'none'}\n                                />\n                                <span className=\"diagram-caption\">Click to enlarge</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      <div className=\"question-footer\">\n                        <span className=\"created-date\">\n                          {new Date(q.created_at).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"questions-list\">\n            {filteredQuestions.map((q, index) => {\n              const parsedData = q.parsed_data ? JSON.parse(q.parsed_data) : {};\n              \n              // Extract question number from question_text if it starts with a number\n              let displayNumber = q.question_number;\n              const numberMatch = q.question_text.match(/^(\\d+)\\s*[\\.\\)]/);\n              if (numberMatch) {\n                displayNumber = numberMatch[1];\n              }\n              \n              return (\n                <div key={q.id} className=\"parsed-question-card\">\n                  <div className=\"question-header-row\">\n                    <div className=\"question-number-badge\">\n                      Q{displayNumber}\n                    </div>\n                    \n                    <div className=\"question-meta-tags\">\n                      <span className={`type-badge ${q.question_type}`}>\n                        {q.question_type}\n                      </span>\n                      \n                      {q.has_diagram && parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                        <span \n                          className=\"diagram-badge clickable\"\n                          onClick={() => {\n                            console.log('Diagram badge clicked (ungrouped):', { paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                            setSelectedDiagram({ paperId: q.paper_id, filename: parsedData.diagram_files[0] });\n                          }}\n                        >\n                          📊 Diagram {parsedData.diagram_files.length > 1 ? `(${parsedData.diagram_files.length})` : ''}\n                        </span>\n                      )}\n                      \n                      {q.marks && (\n                        <span className=\"marks-badge\">{q.marks} marks</span>\n                      )}\n                      \n                      <button \n                        className=\"solve-btn\"\n                        onClick={() => handleSolveQuestion(q)}\n                        disabled={solvingQuestion}\n                        title=\"Get detailed step-by-step solution\"\n                      >\n                        {solvingQuestion ? '⏳ Solving...' : '✨ Solve Question'}\n                      </button>\n                    </div>\n                  </div>\n\n                  {(() => {\n                    const { mainQuestion, mcqOptions, instructions } = parseQuestionContent(q.question_text);\n                    \n                    return (\n                      <>\n                        <div className=\"question-text-display\">\n                          {formatQuestionText(mainQuestion)}\n                          {instructions && (\n                            <span className=\"inline-instruction\"> [Instruction: {instructions}]</span>\n                          )}\n                        </div>\n                        \n                        {mcqOptions.length > 0 && (\n                          <div className=\"mcq-options-display\">\n                            {mcqOptions.map((option, idx) => (\n                              <div key={idx} className=\"mcq-option\">\n                                <span className=\"mcq-option-label\">({option.label})</span>\n                                <span className=\"mcq-option-text\">{option.text}</span>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </>\n                    );\n                  })()}\n\n                  {parsedData.sub_parts && parsedData.sub_parts.length > 0 && (\n                    <div className=\"sub-parts-display\">\n                      <strong>Sub-parts:</strong>\n                      <div className=\"sub-parts-list\">\n                        {parsedData.sub_parts.map((part, idx) => (\n                          <div key={idx} className=\"sub-part-item\">{part}</div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {parsedData.diagram_files && parsedData.diagram_files.length > 0 && (\n                    <div className=\"diagrams-inline-display\">\n                      <strong>📊 Diagram{parsedData.diagram_files.length > 1 ? 's' : ''}:</strong>\n                      <div className=\"diagrams-inline-container\">\n                        {parsedData.diagram_files.map((filename, idx) => (\n                          <div key={idx} className=\"diagram-inline-wrapper\">\n                            <img \n                              src={`http://localhost:5000/api/diagram/${q.paper_id}/${filename}`}\n                              alt={`Diagram ${idx + 1}`}\n                              className=\"diagram-inline\"\n                              onClick={() => {\n                                console.log('Diagram clicked (ungrouped):', { paperId: q.paper_id, filename });\n                                setSelectedDiagram({ paperId: q.paper_id, filename });\n                              }}\n                              onError={(e) => e.target.style.display = 'none'}\n                            />\n                            <span className=\"diagram-caption\">Click to enlarge</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"question-footer\">\n                    <span className=\"paper-info\">\n                      📄 {q.paper_title} • {q.subject}\n                    </span>\n                    <span className=\"created-date\">\n                      {new Date(q.created_at).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n              );\n            })}\n\n            {filteredQuestions.length === 0 && (\n              <div className=\"no-questions\">\n                <p>No questions found matching your criteria</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Diagram Modal */}\n        {selectedDiagram && (\n          <div className=\"diagram-modal\" onClick={() => setSelectedDiagram(null)}>\n            <div className=\"diagram-modal-content\" onClick={(e) => e.stopPropagation()}>\n              <button className=\"close-diagram-btn\" onClick={() => setSelectedDiagram(null)}>✕</button>\n              <img \n                src={`http://localhost:5000/api/diagram/${selectedDiagram.paperId}/${selectedDiagram.filename}`}\n                alt=\"Diagram\"\n                className=\"diagram-full\"\n                onLoad={() => console.log('Modal diagram loaded')}\n                onError={(e) => console.error('Modal diagram failed to load', e)}\n              />\n            </div>\n          </div>\n        )}\n        {selectedDiagram && console.log('Modal should be visible, selectedDiagram:', selectedDiagram)}\n\n        {/* Solution Modal */}\n        {selectedSolution && (\n          <div className=\"solution-modal\" onClick={() => setSelectedSolution(null)}>\n            <div className=\"solution-modal-content\" onClick={(e) => e.stopPropagation()}>\n              <div className=\"solution-modal-header\">\n                <div>\n                  <h3>✨ Step-by-Step Solution - Q{selectedSolution.questionNumber}</h3>\n                  <span className=\"solution-type-badge\">{selectedSolution.questionType}</span>\n                </div>\n                <button className=\"close-solution-btn\" onClick={() => setSelectedSolution(null)}>✕</button>\n              </div>\n              \n              <div className=\"solution-modal-body\">\n                {/* Question Display */}\n                <div className=\"solution-question-box\">\n                  <h4>📝 Question:</h4>\n                  <p>{selectedSolution.questionText}</p>\n                </div>\n\n                {/* Full Solution */}\n                <div className=\"solution-content\">\n                  <pre style={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit' }}>\n                    {selectedSolution.solution}\n                  </pre>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ParsedQuestionsView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}